<?xml version="1.0" encoding="UTF-8"?>
<section version="5.0" xmlns="http://docbook.org/ns/docbook"
         xmlns:xl="http://www.w3.org/1999/xlink"
         xmlns:xi="http://www.w3.org/2001/XInclude"
         xmlns:xhtml="http://www.w3.org/1999/xhtml"
         xmlns:svg="http://www.w3.org/2000/svg"
         xmlns:ns="http://docbook.org/ns/docbook"
         xmlns:mathml="http://www.w3.org/1998/Math/MathML">
  <title>Using Different Output Formats</title>

  <para>The Model-View-Controller-Paradigm (MVC), as described in chapter 2,
  has many decisive advantages: It separates the model from the user
  interaction and it allows different output formats for the same data. We
  want to discuss the later.</para>

  <para>Often different output formats are useful when generating content for
  CSV files, RSS feeds or print views. On the example of the blog we will show
  you, how you can extend your Extension with a print view.</para>

  <para>Lets assume you have programed a HTML view for a list of blog posts.
  The Fluid template of this view is
  <filename>Resources/Private/Templates/Post/list.html</filename>. Now you
  want to add a print view, which is formatted differently. Create a new
  template <filename>Resources/Private/Templates/Post/list.print</filename>
  and write the appropriate Fluid markup to generate the print view. You can
  use the <code>format</code> attribute of the link ViewHelper to generate a
  link to the print view:</para>

  <para><code>&lt;f:link.action action="list" format="print"&gt;Print
  View&lt;/f:link.action&gt;</code></para>

  <para>The same <code>list</code> action is being called that was used for
  the HTML view. However, Fluid doesn't choose the file
  <emphasis>list.html</emphasis> but <emphasis>list.print</emphasis>, because
  the <code>format</code> attribute of the <code>link.action</code> ViewHelper
  changed the format to <code>print</code>, our print view. You notice: The
  format is being reflected in the file ending of the template.</para>

  <tip>
    <para>In the example above we have given the print view the name
    <code>print</code>. All format names are treated equally. There are no
    technical limitations for format names. Therefore you should choose a
    semantically, meaningful name.</para>
  </tip>

  <para><sidebar>
      <para><emphasis role="bold">Output other formats with
      Fluid</emphasis></para>

      <para>If you want to output JSON, RSS or similar data with Fluid, you
      have to write the appropriate TypoScript which passes the page rendering
      to Extbase and Fluid respectivly. Otherwise, TYPO3 will always generate
      the <code>&lt;head&gt;</code>- and
      <code>&lt;body&gt;</code>-section.</para>

      <para>You can use the following TypoScript:</para>

      <para><programlisting>rss = PAGE
rss (
  typeNum = 100
  10 =&lt; tt_content.lost.20.<emphasis>[ExtensionKey]</emphasis>_<emphasis>[PluginName]</emphasis>
  
  config {
    disableAllHeaderCode = 1
    additionalHeaders = Content-type:application/xml
    xhtml_cleaning = 0
    admPanel = 0
  }
}</programlisting>You still have to exchange
      <emphasis>[ExtensionKey]</emphasis> and
      <emphasis>[PluginName]</emphasis> with the name of the Extension and
      Plugin. We recommend to search for the path of your Plugin in the
      TypoScript Object Browser to avoid misspelling. Futher on you have to
      implicitley set
      <code>plugin.</code><emphasis>[ExtensionKey]</emphasis>.<code>persistence.storagePid</code>
      to the ID of the page containg the data, to tell Extbase from which page
      the data should be read. <emphasis> </emphasis></para>
    </sidebar></para>
</section>
