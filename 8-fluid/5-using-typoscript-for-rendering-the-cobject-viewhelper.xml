<?xml version="1.0" encoding="UTF-8"?>
<section version="5.0" xmlns="http://docbook.org/ns/docbook"
         xmlns:xl="http://www.w3.org/1999/xlink"
         xmlns:xi="http://www.w3.org/2001/XInclude"
         xmlns:xhtml="http://www.w3.org/1999/xhtml"
         xmlns:svg="http://www.w3.org/2000/svg"
         xmlns:ns="http://docbook.org/ns/docbook"
         xmlns:mathml="http://www.w3.org/1998/Math/MathML">
  <title>Using TypoScript For Rendering: The cObject-ViewHelper</title>

  <para>The cObject-ViewHelper is a very powerful ViewHelper. It connects
  Fluid with the options that TypoScript offers. The following line in the
  HTML template will be replaced with the referenced TypoScript object.</para>

  <para><code>&lt;f:cObject typoscriptObjectPath="lib.title"
  /&gt;</code></para>

  <para>Now we only have to define <code>lib.title</code> in the TypoScript
  Setup:</para>

  <para><programlisting>lib.title = TEXT
lib.title.value = Extbase and Fluid</programlisting><tip>
      <para><remark>??? What is the tip</remark></para>
    </tip>»Extbase and Fluid«<remark>TODO: Add formatting for output</remark>
  will be outputted in the template. Now we can output an image (e.g.
  headlines with unusual fonts) by changing the TypoScript to:</para>

  <para><programlisting>lib.title = IMAGE
lib.title {
  file = GIFBUILDER
  file {
    10 = TEXT
    10.value = Extbase and Fluid
  }
}</programlisting></para>

  <para><sidebar>
      <para><emphasis role="bold">TypoScript</emphasis></para>

      <para>TypoScript is a flexible configuration language, which can control
      the rendering of a page very detailed. It consists of TypoScript objects
      (also known as <code>Content</code> object or <code>cObject</code>) and
      their configuration options.</para>

      <para>The simplest <code>Content</code> object is <code>TEXT</code>
      which outputs unmodified text. The TypoScript object <code>IMAGE</code>
      can be used to generate images and database entries can be outputted
      with <code>CONTENT</code>.</para>
    </sidebar></para>

  <para>So far it's not really a "real world" example, because no data is
  being passed from Fluid to the TypoScript. We'll demonstrate now how to pass
  a parameter to the TypoScript with the example of a user counter. The value
  of our user counter should come from the Blog-Post. (Every Blog-Post should
  count how many times it's been viewed in this example).</para>

  <para>In the Fluid template we add:</para>

  <para><code>&lt;f:cObject
  typoscriptObjectPath="lib.myCounter"&gt;{post.viewCount}&lt;/f:cObject&gt;</code></para>

  <para>Alternatively we can use a self closing tag. The data is being passed
  with the help of the <code>data</code> attribute.</para>

  <para><code>&lt;f:cObject typoscriptObjectPath="lib.myCounter"
  data="{post.viewCount}" /&gt;</code></para>

  <para>Also advisable for this example is the inline notaion, because you can
  easily read it from left to right:</para>

  <para><code>{post.viewCount -&gt; f:cObject(typoscriptObjectPath:
  'lib.myCounter')}</code></para>

  <para>Now we still have to evaluate the passed value in our TypoScript
  template. We can use the <code>stdWrap</code> attribute <code>current</code>
  to achieve this. It works like a switch: If set to 1, the value, which we
  passed to the TypoScript object in the Fluid template, will be used. In our
  example it looks like this:</para>

  <programlisting>lib.myCounter = TEXT
lib.myCounter {
  current = 1
  wrap = &lt;strong&gt; | &lt;/strong&gt;
}</programlisting>

  <para>This TypoScript snippet outputs the current number of visits written
  in bold.</para>

  <para>Now for example we can output the user counter as image instead of
  text without modifying the Fluid template. We simply have to use the
  following TypoScript:</para>

  <programlisting>lib.myCounter = IMAGE
lib.myCounter {
  file = GIFBUILDER
  file {
    10 = TEXT
    10.current = 1
  }
}</programlisting>

  <para>At the moment we're only passing a single value to the TypoScript.
  It's more versatile though to pass multiple values to the TypoScript object,
  because then you can select which value to use in the TypoScript and the
  values can be concatenated. You can also pass whole objects to the
  ViewHelper in the template:</para>

  <para><code>{post -&gt; f:cObject(typoscriptObjectPath:
  'lib.myCounter')}</code></para>

  <para>Now, how do you access individual properties of the object in the
  TypoScript-Setup? You can use the property <code>field</code> of
  <code>stdWrap</code>:</para>

  <programlisting>lib.myCounter = COA
lib.myCounter {
  10 = TEXT
  10.field = title
  20 = TEXT
  20.field = viewCount
  wrap = (&lt;strong&gt; | &lt;/strong&gt;)
}</programlisting>

  <para>Now we always output the title of the blog, followed by the amount of
  page visits in parenthesis in the example above.</para>

  <para>You can also combine the <code>field</code> based approach with
  <code>current</code>: If you set the property <code>currentValueKey</code>
  in the <code>cObject</code> ViewHelper, then this value will be available in
  the TypoScript template with <code>current</code>. This is especially useful
  when you want to emphazise that the value is very
  <emphasis>important</emphasis> for the TypoScript template. For example, the
  <emphasis>amount of visits</emphasis> is very important in our view
  counter:</para>

  <para><code>{post -&gt; f:cObject(typoscriptObjectPath: 'lib.myCounter',
  currentValueKey: 'viewCount')}</code></para>

  <para>In the TypoScript template you can now use both, <code>current</code>
  and <code>field</code>, and have therefor the maximum flexibility with the
  greatest readability. The following TypoScript snippet outputs the same
  information as the previous example:</para>

  <programlisting>lib.myCounter = COA
lib.myCounter {
  10 = TEXT
  10.field = title
  20 = TEXT
  20.current = 1
  wrap = (&lt;strong&gt; | &lt;/strong&gt;)
}</programlisting>

  <para>The <code>cObject</code> ViewHelper is a powerful option to use the
  best advantages of both worlds by making it possible to embed TypoScript
  expressions in Fluid templates</para>

  <para>In the next chapter, we'll turn our attention to a function which most
  ViewHelper have. This function makes it possible to modify the HTML output
  of a ViewHelper by adding your own tag attributes.</para>
</section>
