<?xml version="1.0" encoding="UTF-8"?>
<section version="5.0" xml:id="Fluid_template_by_example"
         xmlns="http://docbook.org/ns/docbook"
         xmlns:xl="http://www.w3.org/1999/xlink"
         xmlns:xi="http://www.w3.org/2001/XInclude"
         xmlns:xhtml="http://www.w3.org/1999/xhtml"
         xmlns:svg="http://www.w3.org/2000/svg"
         xmlns:ns="http://docbook.org/ns/docbook"
         xmlns:mathml="http://www.w3.org/1998/Math/MathML">
  <title>Template Creation by example</title>

  <para>In this section we will show you some of the techniques you got to
  know in the course so far, in the interaction with our sample extension
  <emphasis>sjr_offers</emphasis>. We will focus on practical solutions for
  repeating problems. The directory structure of the extension is shown in
  Figure 8-2. We are using both layouts and partials, to avoid double code.
  Inside <emphasis>Scripts</emphasis> we put JavaScript code that we use for
  animations and for a Date picker in the frontend.</para>

  <para><remark>TODO: insert Figure 8-2: Folder structure of layouts,
  templates and partials inside the extension sjr_offers</remark></para>

  <para>The extension <emphasis>sjr_offers</emphasis> has an
  <code>OfferController</code> and an <code>OrganizationController</code>.
  Using the <code>OfferController</code>, offers can be displayed as a list
  using the method <code>indexAction()</code> or as single view using the
  method <code>showAction()</code> method. Also offers can be created using
  the method <code>newAction()</code> and available offers can be edited using
  the method <code>editAction()</code>. The
  <code>OrganizationController</code> incorporates the same actions for
  organizations, with exception of the creation of organizations. Within the
  folder <emphasis>EXT:sjr_offers/Resources/Private/Templates</emphasis> we
  have created a folder for each controller, without the suffix
  <emphasis>Controller</emphasis> in the name. Each action method has its own
  HTML template. There is also no suffix <emphasis>Action</emphasis> allowed
  in the name.</para>

  <section>
    <title>Setting up the HTML basic framework</title>

    <para>The various templates have many common elements. First we define the
    basic framework by a common layout (see the section "<xref
    linkend="Fluid_using_layouts" />" earlier in this chapter) and store
    repeating code in partials (see the section "<xref
    linkend="Fluid_using_partials" />" earlier in this chapter). The basic
    framework of our templates looks as follows:</para>

    <para><programlisting>{namespace sjr=Tx_SjrOffers_ViewHelpers}
&lt;f:layout name="default" /&gt;
&lt;f:section name="content"&gt;
  ...
&lt;/f:section&gt;</programlisting></para>

    <para>In most templates we are referencing the layout
    <code>default</code>, that should build the "frame" of our plugin output.
    The actual template resides in a section with the name
    <code>content</code>. The layout definition is stored in the HTML file
    <emphasis>EXT:sjr_offers/Resources/Private/Layouts/default.html</emphasis>:</para>

    <para><programlisting>&lt;div class="tx-sjroffers"&gt;
  &lt;f:render section="content" /&gt;
  &lt;f:flashMessages id="dialog" title="Notice!"/&gt;
&lt;/div&gt;</programlisting></para>

    <para>A section <code>content</code> of the respective template is
    rendered and after this a message to the frontend user is shown if
    necessary. The complete conent of the plugin is then "packed" in a
    <code>div</code> container. The message - a so called <emphasis>flash
    message</emphasis> - will be created inside our sample extension in the
    controller, e.g. at unauthorized access (see also the section
    "<remark>TODO:insert section name</remark>" in chapter 7):</para>

    <para><programlisting>public function updateAction(Tx_SjrOffers_Domain_Model_Offer $offer) {
  $administrator = $offer-&gt;getOrganization()-&gt;getAdministrator();
  if ($this-&gt;accessControlService-&gt;isLoggedIn($administrator)) {
    ...
  } else {
    <emphasis role="bold">$this-&gt;flashMessages-&gt;add('Please log in.');</emphasis>
  }
  ...
}</programlisting></para>
  </section>

  <section>
    <title>Store functions in ViewHelper</title>

    <para>With this the base framework of our plugin output is ready. In the
    templates of our sample extension there still exists some repeating jobs,
    which can be stored in ViewHelper classes.</para>

    <para>One requirement for the extension is, that the organizations can
    edit their (and only their) offers in the frontend. We have to control the
    access at different levels, so that not every website user can change the
    data. We have discussed the different level of the access control already
    in chapter 7. One of those levels are the templates. Elements for editing
    the data, like forms, links and icons, should only displayed when an
    authorized administrator of the organization is logged in as frontend user
    (see figure 8-3). In chapter 7 we suggested the
    <code>IfAuthenticatedViewHelper</code> and the
    <code>AccessControlService</code>, that we had implemeted for this
    purpose.</para>

    <para><remark>TODO: insert Figure 8-3: Single view of an organization with
    its offers (left) and the same view with shown editing symbols
    (right)</remark></para>

    <para>Another repeating job is the formatting of numbers and date
    intervals, For example how the date is displayed for the
    <emphasis>Offerperiod</emphasis><remark> TODO Change this to the correct
    term as also used in the screenshot</remark> in Figure 8-3. An offer can
    have a minimum and/or a maximum amount of attendees for example. If none
    of this is given, nothing should be displayed. If only one of these values
    is given the value should be prefixed with from respectively to. We store
    these jobs in a <code>NumericalRangeViewHelper</code> and call it in our
    template like this:</para>

    <para><code>&lt;sjr:format.numericRange&gt;{offer.ageRange}&lt;/sjr:format.numericRange&gt;</code></para>

    <para>Alternatively you can use the inline notation of Fluid (therefore
    see the box "<xref linkend="Fluid_inline_vs_tag" />" earlier in this
    chapter):</para>

    <para><code>{offer.ageRange-&gt;sjr:format.numericRange()}</code></para>

    <para>The NumericRangeViewHelper is implemented as follows:</para>

    <para><remark>TODO: insert code here</remark></para>

    <para>The method render() has the optional argument <code>$range</code>.
    This is important for the inline notation. When this argument is not set
    (also <code>NULL</code>), the code between the starting and ending tag is
    processed ("normal" notation) by calling the method
    <code>renderChildren()</code>. Is the result an object that implements the
    NumericRangeInterface then the described use cases are checked step by
    step and the resulting string is returned. In similiar manner the
    <code>DateRangeViewHelper</code> was implemented.</para>
  </section>

  <section>
    <title>Design a form</title>

    <para>At the end we show you another sample for designing a form for
    editing the basic data of an organization. You find the associated
    template <emphasis>edit.html</emphasis> in the folder
    <emphasis>EXT:sjr_offers/Resources/Private/Templates/Organization/</emphasis>.</para>

    <para><remark>TODO: insert code here</remark></para>

    <para>The form is enclosed in the tags of the
    <code>IfAuthenticatedViewHelper</code>. If the access is granted than the
    form is displayed, otherwise the content of the partial
    <code>accessError</code> is displayed.</para>

    <para><programlisting>&lt;div id="dialog" title="Notice!"&gt;
  You are not authorized to execute this action. 
  Please first log in with your username and password.
&lt;/div&gt;</programlisting></para>

    <para>With the declaration of <code>object="{organization}"</code> the
    proper form is bound to the assigned <code>Organization</code> object in
    the <code>editAction()</code>.<remark>TODO: Rewrite sentence</remark> The
    form consists of input fields that are created by Fluid with the
    <code>form.textbox</code> ViewHelper respectively the
    <code>form.textarea</code> ViewHelper. Each form field is bound to their
    specific propety of the <code>Organization</code> object using
    <code>property="telefaxNumber"</code>. The attribute value of the concrete
    object is inserted in the form fields during rendering of the page. When
    submitting the form, the data is send as POST parameters to the method
    <code>updateAction()</code>.</para>

    <para>When the entered data is not valid, the method
    <code>editActon()</code> is called again and an error message is
    displayed. We have stored the HTML code for the error message in a partial
    <code>formErrors</code> (see
    <emphasis>EXT:sjr_offers/Resources/Private/Partials/formErrors.html</emphasis>).
    In this partial, the name of the form that relates to the error message is
    given as <code>formName</code>:</para>

    <para><programlisting>&lt;f:form.errors for="formName"&gt;
  &lt;div id="dialog" title="{error.propertyName}"&gt;
    &lt;p&gt;
      &lt;f:for each="{error.errors}" as="errorDetail"&gt;
        {errorDetail.message}
      &lt;/f:for&gt;
    &lt;/p&gt;
  &lt;/div&gt;
&lt;/f:form.errors&gt;</programlisting></para>

    <sidebar>
      <title><emphasis role="bold">Localize error messages</emphasis></title>

      <para>The error messages of the default validators that are delivered
      with Extbase are not localized in version 1.2. You can translate the
      messages yourself by replacing the before described partial
      <code>formErrors</code> with the following code:</para>

      <para><remark>TODO: insert code here</remark></para>

      <para>In the file
      <emphasis>EXT:sjr_offers/Resources/Private/Language/locallang.xml</emphasis>
      you have to write for example:</para>

      <para><programlisting>&lt;label index="newOffer.title"&gt;Title of the offer&lt;/label&gt;
&lt;label index="newOffer.title.1238108067"&gt;The length of the title must between 3 an 50 character.&lt;/label&gt;</programlisting></para>

      <para>This solution is only an agreement. The default localization of
      the error messages is planned for a future version of
      Extbase.<remark>TODO: rework for current Extbase version</remark></para>
    </sidebar>
  </section>
</section>
