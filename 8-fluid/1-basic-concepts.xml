<?xml version="1.0" encoding="UTF-8"?>
<section version="5.0" xmlns="http://docbook.org/ns/docbook"
         xmlns:xl="http://www.w3.org/1999/xlink"
         xmlns:xi="http://www.w3.org/2001/XInclude"
         xmlns:xhtml="http://www.w3.org/1999/xhtml"
         xmlns:svg="http://www.w3.org/2000/svg"
         xmlns:ns="http://docbook.org/ns/docbook"
         xmlns:mathml="http://www.w3.org/1998/Math/MathML">
  <title>Basic Concepts</title>

  <para>Fluid is a template engine which lets you display content on a website
  very easily. A specific file (the template) will be processed and the
  containing placeholders will be replaced with the current content. This is
  the basic concept of template engines - as well as Fluid's.</para>

  <para>Fluid is based on three conceptual pillars which build the backbone of
  the template engine and provide for scalability and flexibility:</para>

  <itemizedlist>
    <listitem>
      <para><emphasis>Object Accessors</emphasis> output the content of
      variables which were assigned to the View to be displayed.</para>
    </listitem>

    <listitem>
      <para><emphasis>ViewHelpers</emphasis> are special tags in the template
      which provide more complex functionality such as loops or generating
      links.</para>
    </listitem>

    <listitem>
      <para><emphasis>Arrays</emphasis> make it possible to assign
      hierarchical values to ViewHelpers.</para>
    </listitem>
  </itemizedlist>

  <section>
    <title>Outputting Data with Object Accessors</title>

    <para>A template engine uses a placeholder to fill content in specified
    areas in a template and the result is then returned to the user. In Fluid,
    these placeholders are called <emphasis>Object
    Accessors</emphasis>.</para>

    <tip>
      <para>The markers used in the classic marker based templates of TYPO3 v4
      are also placeholders which are replaced later on by the desired data.
      You will notice though, that the placeholders used in Fluid are clearly
      more flexible and versatile.</para>
    </tip>

    <para>Object Accessors are written in curly brackets. For example,
    <code>{blogTitle} </code>will output the content of the variable
    <code>blogTitle</code>. The variables have to be assigned in the
    controller with <code>$this-&gt;view-&gt;assign(variableName,
    object)</code>. Let us look at this in an example of a list of blog posts.
    In the controller, we assign some data to the template with the following
    code:<programlisting>class Tx_BlogExample_Controller_PostController extends Tx_Extbase_MVC_Controller_ActionController {
  ...
  public function indexAction(Tx_BlogExample_Domain_Model_Blog $blog) {
    $this-&gt;view-&gt;assign('blogTitle', 'Webdesign-Blog');
    $this-&gt;view-&gt;assign('blogPosts', $blog-&gt;getPosts());
  }
}</programlisting>Now we can insert the string »Webdesign-Blog« into the
    template with the Object Accessor <code>{blogTitle}</code>. Let us take a
    look at the associated template:</para>

    <para><programlisting>&lt;h1&gt;{blog.Title}&lt;/h1&gt;

&lt;f:for each="{blogPost}" as="post"&gt;
  &lt;b&gt;{post.title}&lt;/b&gt;&lt;br /&gt;
&lt;/f:for&gt;</programlisting>Upon generation of the output, the Object
    Accessor <code>{blogTitle}</code> will be replaced by the title of the
    blog »Webdesign-Blog«. To output the individual blog posts, the tag
    <code>&lt;f:for&gt;</code> is used, which you can also see in the template
    above. Depending on the title of each blog post, the complete output looks
    like this:</para>

    <para><programlisting>&lt;h1&gt;Webdesign-Blog&lt;/h1&gt;

&lt;b&gt;Fluid as template-engine&lt;/b&gt;&lt;br /&gt;
&lt;b&gt;TypoScript to configure TYPO3&lt;/b&gt;&lt;br /&gt;</programlisting></para>

    <tip>
      <para>If you want to output an object instead of a String, the object
      needs to have a <code>__toString()</code>-method which returns the
      textual representation of the object.</para>
    </tip>

    <para>In the example above, you will also find the Object Accessor
    <code>{post.title}</code> which is used to output the title of a blog
    post. This hierarchical notation is a syntax that makes it possible to
    walk through associations in the object graph - you can literally move
    from object to object. Often, a complex object is assigned to the View,
    but only parts of it will be displayed. In the example above, we used
    <code>{post.title}</code> to display the property <code>title</code> of
    the object. Generally, Fluid tries to handle such hierarchical properties
    in the following order:</para>

    <itemizedlist>
      <listitem>
        <para>If <code>post</code> is an array or an object which implements
        the interface ArrayAccess, the corresponding property will be returned
        as long as it exists.</para>
      </listitem>

      <listitem>
        <para>If it is an object, and a method
        <methodname>getTitle()</methodname> exists, the method will be called.
        This is the most common use case of an Object Accessor, since by
        convention all public properties have a corresponding
        <code>get</code>-method.</para>
      </listitem>

      <listitem>
        <para>The property will be returned if it exists in the object and it
        is public. We discourage the ability to utilize this though, since it
        violates the Uniform Access Principle (see box)</para>
      </listitem>
    </itemizedlist>

    <para><sidebar>
        <title>The Uniform Access Principle</title>

        <para>The Uniform Access Principle says, all services offered by a
        module should be available through an uniform notation which does not
        betray whether they are implemented through storage or through
        computation. <remark>Explanation on Wiki</remark></para>

        <para>Stored objects are being accessed directly using public class
        variables in PHP - and it is visible on the outside that the object
        isn't being computed. For this reason, we often use get and
        set-methods in our models. Therefore, all options of the class are
        accessible through method calls and are uniformly addressed - it is
        not visible on the outside whether the class computed or stored the
        value directly.</para>
      </sidebar></para>

    <para>You can navigate through more complex objects, because Object
    Accessors can be nested multiple times. For example, to output the email
    address of an author of a blog post, you can use
    <code>{post.author.emailAddress}</code>. That's almost equivalent to the
    expression <code>$post-&gt;getAuthor()-&gt;getEmailAddress()</code> in
    PHP, but focused on the essential.</para>

    <para>Only the get-method, and not just any method, of an object can be
    called with Object Accessors. This ensures that there is no PHP code in
    the template. It is better to place PHP code in your own ViewHelper if
    needed. The following describes how to do this.</para>
  </section>

  <section>
    <title>Implementing more complex functionalities with ViewHelpers</title>

    <para>Functionalities that exceed the simple output of values have to be
    implemented with ViewHelpers. Every ViewHelper has its own PHP class. Now,
    we're going to see how we can use ViewHelpers. Later, you'll also learn
    how to write your own ViewHelper.</para>

    <para>To use an existing ViewHelper, you have to import the
    <emphasis>Namespace</emphasis> and assign a shortcut to it. You can do
    this with the declaration <code>{namespace ...=...}</code>.</para>

    <para>All Namespaces used in your template must always be registered. This
    might seem redundant, but because all important information is embedded in
    the template, readability increases immensely for other template editors
    who work on the same templates.</para>

    <para>The standard ViewHelper of Fluid will be imported and assigned to
    the shortcut <code>f</code> with the following declaration:</para>

    <programlisting>{namespace f=Tx_Fluid_ViewHelpers}</programlisting>

    <para>This Namespace will be imported automatically by Fluid. All
    ViewHelpers that come with Fluid are prefixed with <code>f</code>. Your
    own Namespaces have to be imported into the template like previously
    mentioned.</para>

    <para>All tags, which begin with a registered prefix, will be evaluated.
    Here's a small example:</para>

    <para><programlisting>&lt;u&gt;
&lt;f:for each="{blogPosts}" as="post"&gt;
  &lt;li&gt;{post.title}&lt;/li&gt;
&lt;/f:for&gt;
&lt;/ul&gt;</programlisting>Tags without a registered prefix (in this example
    &lt;ul&gt; and &lt;li&gt;) will be treated as text. The tag
    <code>&lt;f:for&gt;</code> will be interpreted as a ViewHelper since it
    starts with the prefix <code>f:</code>. This is implemented in the class
    <classname>Tx_Fluid_ViewHelpers_ForViewHelper</classname>.</para>

    <para>The first part of the class name is the complete Namespace like it
    was defined earlier with <code>{namespace f=Tx_Fluid_ViewHelpers}</code>.
    Followed by the name of the ViewHelper and the ending
    <emphasis>ViewHelper</emphasis>.</para>

    <para>Every argument of a ViewHelper will be interpreted by Fluid. The
    ViewHelper <code>&lt;f:for&gt;</code> from the previous example therefore
    receives the array of all blog posts with the argument
    <emphasis>each</emphasis>. <tip>
        <para>If the name of the ViewHelper contains a single or multiple
        periods, it will be resolved as a sub package. For example, the
        ViewHelper <code>f:form.textbox</code> is implemented in the class
        <classname>Tx_Fluid_ViewHelpers_Form_TextboxViewHelper</classname>.
        Therefore ViewHelpers can be divided further and structured even
        more.</para>
      </tip></para>

    <para>ViewHelpers are the main tools of template editors. They make it
    possible to have a clear separation of template and embedded
    functionality.</para>

    <para><tip>
        <para>All control structures like <code>if/else</code> or
        <code>for</code> are individual ViewHelpers in Fluid and not a core
        language feature. This is one of the main reasons for the flexibility
        of Fluid. You'll find a detailed reference of the ViewHelpers in
        Appendix <remark></remark>C.</para>
      </tip><emphasis role="bold">Inline Notification for View
    Helpers</emphasis></para>

    <para>It is intuitive and natural for most of the ViewHelpers to be called
    with the tag based syntax. Especially with control structures or form
    elements, this syntax is easily understood. But there are also ViewHelpers
    which can lead to difficult to understand and invalid template code when
    used as a tag. An example of this is the <code>f:uri.resource</code>
    ViewHelper, which returns the path to a resource in the
    <emphasis>Public/</emphasis> folder of an Extension. It is being used
    inside of <code>&lt;link rel="stylesheet" href="..." /&gt;</code> for
    example. Using the normal, tag based syntax it looks like this:</para>

    <programlisting>&lt;link rel="stylesheet" href="&lt;f:uri.resource path='myCss.css' /&gt;" /&gt;</programlisting>

    <para>That is very difficult to read and doesn't communicate adequately
    the meaning of the ViewHelper. Also, the above code is not valid XHTML and
    therefore most text editors can't display the code with correct syntax
    highlighting anymore.</para>

    <para>For that reason, it is also possible to call the ViewHelper
    differently, with the help of the <emphasis>inline notation</emphasis>.
    The inline notation is function-oriented, which is more suitable for this
    ViewHelper: Instead of <code>&lt;f:uri.resource /&gt;</code> you can also
    write <code>{f:uri.resource()}</code>.</para>

    <para>So the example above can be changed to:</para>

    <programlisting>&lt;link rel="stylesheet" href="{f:uri.resource(path: 'myCss.css')}" /&gt;</programlisting>

    <para>The purpose of the ViewHelper is easily understandable and visible -
    it is a helper function that returns a resource. It is well formed XHTML
    code as well and the syntax highlighting of your editor will work
    correctly again.</para>

    <para>We'll illustrate some details of Fluid's syntax, based on formating
    a date.</para>

    <para>Lets assume we have a blog post object with the name
    <emphasis>post</emphasis> in the template. It has, among others, a
    property <emphasis>date</emphasis> which contains the date of the creation
    of the post in a <emphasis>DateTime</emphasis> object.</para>

    <para><emphasis>DateTime</emphasis> objects, that can be used in PHP to
    represent dates, have no <methodname>__toString()</methodname>-method and
    can therefore not be outputted with Object Accessors in the template.
    You'll trigger a PHP error message, if you simple write
    <code>{post.date}</code> in your template.</para>

    <para>In Fluid there is a ViewHelper <code>f:format.date</code> to output
    <emphasis>DateTime</emphasis> objects, which (as you can see on the prefix
    <code>f:</code>) is already part of Fluid:</para>

    <para><code>&lt;f:format.date
    format="Y-m-d"&gt;{post.date}&lt;/f:format.date&gt;</code></para>

    <para>This ViewHelper formats the date as defined in the
    <emphasis>format</emphasis> property. In this case, it's very important
    that there are no whitespaces or newlines before or after
    <code>{post.date}</code>. If there is, Fluid tries to chain the whitespace
    and the string representation of <code>{post.date}</code> together as
    string. Because the DateTime object has no method
    <methodname>__toString()</methodname>, a PHP error message will be thrown
    again.</para>

    <para><tip>
        <para>To avoid this problem, all <code>f:format</code>-ViewHelpers
        have a property to specify the object to be formatted.</para>

        <para>Instead of writing
        <code>&lt;f:format.date&gt;{post.date}&lt;/f:format.date&gt;</code>
        you can write: <code>&lt;f:format.date date="{post.date}" /&gt;</code>
        to bypass the problem. But again, there can't be any characters before
        or after <code>{post.date}</code>.</para>
      </tip>You can pretty much see, that in this case the tag based syntax is
    prone to errors: We have to know, that <code>{post.date}</code> is an
    object so we don't add whitespaces inside of
    <code>&lt;f:format.date&gt;...&lt;/f:format.date&gt;</code>.</para>

    <para>An alternative would be to use the following syntax:</para>

    <programlisting>{post.date -&gt; f:format.date(format: 'Y-m-d')}</programlisting>

    <para>Inside the Object Accessor we can use a ViewHelper to process the
    value. The above example is easily readable, intuitive and less error
    prone as the tag based variation.</para>

    <para><tip>
        <para>This might look familiar, if you happen to know the UNIX shell:
        There is a pipe operator (|) which has the same functionality as our
        chaining operator. The arrow shows the direction of the data flow
        better though.</para>
      </tip></para>

    <para>You can also chain multiple ViewHelpers together. Lets assume we
    want to pad the processed string to the length of 40 characters (e.g.
    because we output code). This can be simply written as:</para>

    <programlisting>{post.date -&gt; f:format.date(format: 'Y-m-d') -&gt; f:format.padding(padLength: 40)}</programlisting>

    <para>Which is functionally equal to:</para>

    <programlisting>&lt;f:format.padding padLength="40"&gt;&lt;f:format.date format="Y-m-d"&gt;{post.date}&lt;/f:format.date&gt;&lt;/f:format.padding&gt;</programlisting>

    <para>The data flow is also easier to read with an inline syntax like
    this, and it is easier to see on which values the ViewHelper is working
    on. We can thus confirm that you can process the value of every Object
    Accessor by inserting it into the ViewHelper with the help of the chaining
    operator (-&gt;) . This can also be done multiple times.</para>

    <para><sidebar xml:id="Fluid_inline_vs_tag">
        <title>Inline Notation vs. Tag Based Notation</title>

        <para>Once again a comparison between inline notation and tag based
        syntax:</para>

        <para>Tags have an advantage, if:</para>

        <itemizedlist>
          <listitem>
            <para>Control structures are being displayed:</para>

            <programlisting>&lt;f:for each="{posts}" as="post"&gt;...&lt;/f:for&gt;</programlisting>
          </listitem>

          <listitem>
            <para>The ViewHelper returns a tag:</para>

            <para><code>&lt;f:form.textbox /&gt;</code></para>
          </listitem>

          <listitem>
            <para>The hierarchical structure of ViewHelpers is
            important:</para>

            <para><code>&lt;f:form&gt;</code></para>

            <para><code> &lt;f:form.textbox /&gt;</code></para>

            <para><code>&lt;/f:form&gt;</code></para>
          </listitem>

          <listitem>
            <para>The ViewHelper contains a lot of content:</para>

            <para><code>&lt;f:section name="main"&gt;</code></para>

            <para>....</para>

            <para><code>&lt;/f:section&gt;</code></para>
          </listitem>
        </itemizedlist>

        <para>Inline notation should be used, if:</para>

        <itemizedlist>
          <listitem>
            <para>The focus is on the data flow:</para>

            <para><code>{post.date -&gt; f:format.date(format: 'Y-m-d') -&gt;
            f:format.padding(padLength: 40)}</code></para>
          </listitem>

          <listitem>
            <para>The ViewHelper is being used inside of XML tags:</para>

            <para><code>&lt;link rel="stylesheet" href="{f:uri.resource(path:
            'styles.css')}" /&gt;</code></para>
          </listitem>

          <listitem>
            <para>The nature of the ViewHelper is rather a helper
            function</para>

            <para><code>{f:translate(key: '...')}</code></para>
          </listitem>
        </itemizedlist>
      </sidebar></para>
  </section>

  <section>
    <title>Flexible Arrays Data Structures</title>

    <para>Arrays round off the concept of Fluid and build another core concept
    of the template engine. Arrays in Fluid can be somewhat compared to
    associative arrays in PHP. Every value in a Fluid array needs a
    key.</para>

    <para>Arrays are used to pass a variable number of arguments to View
    Helpers. The best example is the <code>link.action</code>-ViewHelper. With
    this you can create a link to other Controllers and Actions in your
    Extension. The following link refers to the <code>index</code> Action of
    the <code>Post</code> Controller:</para>

    <para><code>&lt;f:link.action controller="Post" action="index"&gt;Show
    list of all posts&lt;/f:link.action&gt;</code></para>

    <para>Many links in your application though need parameters, which can be
    passed with the <code>arguments</code> attribute. We can already see that
    we need arrays to do so: It's unpredictable how many parameters you want
    to pass. By using an array we can pass an indefinite amount of parameters.
    The following example adds the parameter <code>post</code> to the
    link:</para>

    <para><code>&lt;f:link.action controller="Post" action="show"
    arguments="{post: currentPost}"&gt;Show current
    post&lt;/f:link.action&gt;</code></para>

    <para>The array <code>{post: currentPost}</code> consists of a single
    element with the name <code>post</code>. The value of the element is the
    object <code>currentPost</code>. Multiple elements are separated by a
    comma: <code>{post: currentPost, blogTitle:
    'Webdesign-Blog'}</code>.</para>

    <para>Fluid only supports named arrays, which means, that you always have
    to specify the key of the array element. Lets look at what options you
    have when creating an array:</para>

    <para><programlisting>{ key1: 'Hello',
  key2: "World",
  key3: 20,
  key4: blog,
  key5: blog.title,
  key6: '{firstname} {lastname}'
}</programlisting>The array can contain strings as values as in key1 and key2.
    It can also have numbers as values as in key3. More interesting are key4
    and key5: Object Accessors are being specified as array values. You can
    also access sub-objects like you are used to with Object Accessors. All
    strings in arrays are interpreted as Fluid markup as well. So that you can
    combine strings from individual strings for example. This way, it is also
    possible to call ViewHelpers with the inline notation.</para>

    <para>These are the basic concepts of Fluid. Now we move on to more
    advanced concepts, which increase the effectiveness of template creation.
    The following chapter will explain how to use different output formats to
    achieve different views of data.</para>
  </section>
</section>
