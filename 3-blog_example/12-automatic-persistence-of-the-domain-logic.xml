<?xml version="1.0" encoding="UTF-8"?>
<section version="5.0" xmlns="http://docbook.org/ns/docbook"
         xmlns:xl="http://www.w3.org/1999/xlink"
         xmlns:xi="http://www.w3.org/2001/XInclude"
         xmlns:xhtml="http://www.w3.org/1999/xhtml"
         xmlns:svg="http://www.w3.org/2000/svg"
         xmlns:ns="http://docbook.org/ns/docbook"
         xmlns:mathml="http://www.w3.org/1998/Math/MathML">
  <title>automatic persistence of the domain logic</title>

  <para>Remarkable at this point is, that up to this time no method to save
  the blogs or posts was called. Only the fact that the post is added to the
  blog and thereby was changed is enough to initiate extbase to save the
  changes permanently (to persist). Like on our first route the persistance
  manager is assigned with it by
  <code>$persistenceManager-&gt;persistAll()</code>. This time it collects all
  reconstructed objects (e.g. such, that are restored from the database) that
  are managed by a repository. These "managed" objects represent the root
  objects of an object graph (aggregate). These are so called
  <emphasis>aggregate root</emphasis> objects.</para>

  <note>
    <para>More about the object life cycle you will find out in "Domain Driven
    Design" in chapter 2. The states <emphasis>transient</emphasis> and
    <emphasis>persistent</emphasis> are also elucidated in detail there. For
    the topic aggregate root you will find in the section "aggregates" in
    chapter 2 a detailed introduction.</para>
  </note>

  <para>The collection of new and deleted objectsas well as the root objects
  (in our case the <code>Blog</code> objects) are hand over from the
  persistence manager to the persistence backend. The backend has the task to
  manage the complete process in a controlled manner. The course is done in
  the following order:</para>

  <para><itemizedlist>
      <listitem>
        <para>All new added aggregate root objects are inserted (first without
        to create the child and grandchild objects).</para>
      </listitem>

      <listitem>
        <para>All properties of the aggregate root objects are
        persisted.</para>
      </listitem>

      <listitem>
        <para>All kind objects are processed recusive in a corresponding
        manner.</para>
      </listitem>

      <listitem>
        <para>All removed objects were deleted.</para>
      </listitem>
    </itemizedlist></para>

  <warning>
    <para>Do not confound the persistence backend with the storage backend
    that we discussed before in the section "An excursion to the database" in
    this chapter. The persistence backend is a layer "above" the storage
    backend. It is responsible for the cycle of the persistence (what should
    be stored, deleted or changed in which order?), while the storage backend
    has the job to translate the abstact requests into the native language of
    the "physical" storage option (most the SQL dialect of a database).</para>
  </warning>

  <para>In our case the persistence backend (in the following called backend)
  checks for every <code>Blog</code> object whose properties (<code>title,
  description, posts</code> and so on) if the property values have to be
  stored. This is the case ifthe corresponding objects is new or the property
  value was changed in the runtime. If the property refer to an object, the
  backend checks in the next step also these objects for changes of the
  property values.</para>

  <sidebar>
    <title><emphasis role="bold">Dirty objects</emphasis></title>

    <para>How does extbase know that a property value has changed? Every
    object of the domain of your extension (domain object) must enhance a
    defined class of extbase. For the blog class this is
    <code>Tx_Extbase_DomainObject_AbstractEntity</code>. Inside this parent
    class a property <code>$_cleanProperties</code> is defined. This property
    is directly, after the recontruction of the object (restored from the
    database), initialized with the unchanged property values with a call of
    <code>_memorizeCleanState()</code>; in our case with the title, the
    description, the administrator and all <code>post</code> objects. With
    this it is possible later on to check every property for changes with
    calling of <code>_isDirty($propertyName)</code>.</para>
  </sidebar>

  <note>
    <para>All methods that starts with an underline (_) are internal methods.
    These methods can be called from "outside" (public) in a technical view,
    but they should not called inside an extension - even though it is
    attractive to do that. In FLOW3 the "observation" of the objects is solced
    in an other way and it is not applicable to enhance a parent class of the
    framework. The declaration <code>extends
    Tx_Extbase_DomainObject_AbstractEntity</code> can simply be removed when
    you port your extension to TYPO3 v5.</para>
  </note>

  <para>In our example the backend find the new post while it iterates through
  the post objects. The storage backend is directed to store these post in the
  database - and with it also all of its relations to other objects. Because
  the post has a 1:n relation to the blog (a blog has many posts, every post
  is part of just one blog) the UID of the blog is stored inside the property
  <code>blog</code> of the post. With this the post refers to its blog and can
  be assigned when the method <code>indexAction()</code> is called.</para>

  <para>We are glad that you followed us also on this second, much more
  exhausting route. With the holiday destination you are so far familiar that
  you can move around safety in the blog example in the future without us -
  your travel guides. Of course there is a lot more to explore!</para>
</section>
