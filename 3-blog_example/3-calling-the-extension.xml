<?xml version="1.0" encoding="UTF-8"?>
<section version="5.0" xmlns="http://docbook.org/ns/docbook"
         xmlns:xl="http://www.w3.org/1999/xlink"
         xmlns:xi="http://www.w3.org/2001/XInclude"
         xmlns:xhtml="http://www.w3.org/1999/xhtml"
         xmlns:svg="http://www.w3.org/2000/svg"
         xmlns:ns="http://docbook.org/ns/docbook"
         xmlns:mathml="http://www.w3.org/1998/Math/MathML">
  <title>Calling the extension</title>

  <para>When a user opens the web page containing our blog in their browser,
  this request (Request) will be forwarded to the remote TYPO3 Server. Then
  TYPO3 starts the processing of this request straight away.</para>

  <para>A request generally contains the identification number of the page
  (the so called Page-ID or PID) that should be generated (e. g. id=99). Using
  this PID TYPO3 searches all relevant content elements on the specific page
  and converts these to the outputted HTML code one after another. While
  processing this page request TYPO3 comes by the content element for our
  example extension, the so called plugin. This plugin should display a list
  of all blogs. Each with the individual title, a short description and the
  amount of all inclosed posts. In figure 3-4 you can see the output of the
  plugin in the frontend. This output is embedded within the greater overview
  of the page.</para>

  <remark>TODO: Insert figure 3-3: "Output of the plugin of our example
  extension</remark>

  <para>The process of processing is within of TYPO3 forwarded to the
  dispatcher of Extbase at first. The dispatcher completes several preliminary
  tasks before it hands the further processing on to the according position
  within the code of our blog example:<remark>TODO: Rewrite
  sentences.</remark></para>

  <itemizedlist>
    <listitem>
      <para>It interprets the incoming request and bundles all relevant
      information into a <emphasis>Request</emphasis> object.</para>
    </listitem>

    <listitem>
      <para>It prepares the <emphasis>Response</emphasis> object as a
      container for the result of the request.</para>
    </listitem>

    <listitem>
      <para>It loads the configuration of our extension from the different
      sources and makes it available.</para>
    </listitem>

    <listitem>
      <para>It determines whether or not the request was manipulated in an
      illegal manner and when this is the case deflects it (e.g. in of case
      maliciously added form input field).</para>
    </listitem>

    <listitem>
      <para>It sets up the persistence layer which performs the persisting of
      new or changed object.</para>
    </listitem>

    <listitem>
      <para>It prepares the cache in which content is stored for faster
      reuse.</para>
    </listitem>

    <listitem>
      <para>It instantiates and configures the controller of our extension
      which controls the further processing within the extension.</para>
    </listitem>
  </itemizedlist>

  <para>When these preparations are full-filled by the Extbase dispatcher, we
  are able to travel to the first stop of our destination: the controller. In
  our example the further processing is assigned to the
  <classname>BlogController</classname>. A reference to the request and the
  response is handed over.</para>

  <para>The class <classname>BlogController</classname> can be found in the
  file
  <filename>EXT:blog_example/Classes/Controller/BlogController.php</filename>.
  The complete name of the controller is
  <classname>Tx_BlogExample_Controller_BlogController</classname>. At first
  this might seem long-winded but the syntax follows a very strict convention
  (please see box "Be careful, conventions!").</para>

  <tip>
    <para>Be careful, conventions!</para>

    <para>The name of a class is separated into individual parts, which
    themselves are divided by an underscore. All parts of a class name are
    spelled with capital camel case, where each initial letter is capitalized.
    This style for notation is commonly known as
    <emphasis>UpperCamelCase</emphasis> because each capital letter suggests
    the hump of a camel. For extensions the first part always is
    "<classname>Tx</classname>". The second part is the name of the extension
    - in the underlying case "<classname>BlogExample</classname>". The last
    art is the name of the domain object. The center between those parts
    builds the path to the class file below the folder
    <filename>Classes</filename>. In our case the file is stored directly
    within the folder <filename>Controller</filename>. The name of the class
    file is taken from the last part of the class name appended with the
    suffix <filename>.php</filename>.</para>
  </tip>
</section>
