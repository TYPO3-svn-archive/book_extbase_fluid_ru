<?xml version="1.0" encoding="UTF-8"?>
<section version="5.0" xmlns="http://docbook.org/ns/docbook"
         xmlns:xl="http://www.w3.org/1999/xlink"
         xmlns:xi="http://www.w3.org/2001/XInclude"
         xmlns:xhtml="http://www.w3.org/1999/xhtml"
         xmlns:svg="http://www.w3.org/2000/svg"
         xmlns:ns="http://docbook.org/ns/docbook"
         xmlns:mathml="http://www.w3.org/1998/Math/MathML">
  <title>And... action!</title>

  <para>Our journey through the blog example is not only an educational, but
  also an activity holiday. We now turn to the activities. We are already in
  the <classname>BlogController</classname>. You can find the class file under
  <filename>EXT:blog_example/Classes/BlogController.php</filename>.</para>

  <para>In software development, there are different variants of controllers.
  In Extbase the controllers mostly exist as
  <classname>ActionController</classname>. This variant is characterized by
  short methods, which are responsible for the control of a single action, the
  so called <methodname>Actions</methodname>. Let's have a deeper look at a
  shortened version of the <classname>BlogController</classname>:</para>

  <remark>TODO: Insert code</remark>

  <para>The method <methodname>indexAction()</methodname> within the
  <classname>BlogController</classname> is responsible for showing a list of
  blogs. We also could have called it
  <methodname>showMeTheListAction()</methodname>. The only important point is,
  that it ends with <methodname>Action</methodname> in order to help Extbase
  to recognize it as an action. <methodname>newAction()</methodname> shows a
  form to create a new blog. The <methodname>createAction()</methodname> then
  creates a new blog with the data of the form. The pair
  <methodname>editAction()</methodname> and
  <methodname>updateAction()</methodname> have a similar functionality for the
  change of an existing blog. The job of the
  <methodname>deleteAction()</methodname> should be self explaining.</para>

  <tip>
    <para>Who already dealed with the model-view-controller-pattern will
    notice, that the controller has only a little amount of code. Extbase (and
    FLOW3) aim to the approach to have a slim controller. The controller is
    exclusively responsible for the control of the process flow. Additional
    logic (especially business or domain logic) needs to be seperated into
    classes in the subfolder <filename>Domain</filename>.</para>
  </tip>

  <tip>
    <para>The name of the action is strictly spoken only the part without the
    suffix <methodname>Action</methodname>, e.g.
    <methodname>list</methodname>, <methodname>show</methodname> or
    <methodname>edit</methodname>. With the suffix
    <methodname>Action</methodname> the name of the action-method is marked.
    But we use the action itself and its method mostly synonymous.</para>
  </tip>

  <para>From the request the controller can extract which action has to be
  called. The call is happening without the need to write another line of code
  in the BlogController. This does
  <classname>Tx_Extbase_MVC_Controller_ActionController</classname>. The
  BlogController "inherits" all methods from it, by deriving it form this
  class:</para>

  <para><code>class Tx_BlogExample_Controller_BlogController extends
  Tx_Extbase_MVC_Controller_ActionController {...}</code></para>

  <para>At first call of the plugin without additional information the request
  will get a standard action; in our case the
  <methodname>indexAction()</methodname>. The
  <methodname>indexAction()</methodname> contains only one line in our example
  (as shown above), which looks more detailled like this:</para>

  <remark>TODO: Insert code</remark>

  <para>In the first line a repository is instantiated, which "contains" all
  blogs. How they are saved and managed, is not of interest at this point of
  our journey. All files, which are defined in the repository-classes, are
  located in the folder
  <filename>EXT:blog_example/Classes/Domain/Repository/</filename>. This you
  can also derive directly from the Name
  <classname>BlogExample_Domain_Repository_BlogRepository</classname>. This
  naming scheme is a big advantage by the way, if you search a particular
  class file. The name <classname>BlogRepository</classname> results from the
  name of the class, whose instances are managed by the repository, namely by
  adding <classname>Repository</classname>. A repository can only manage one
  single class at a time. The second line retrieves all available blogs by
  <methodname>findAll()</methodname>.</para>
</section>
