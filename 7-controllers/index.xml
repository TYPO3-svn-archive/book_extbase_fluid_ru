<?xml version="1.0" encoding="UTF-8"?>
<chapter version="5.0" xmlns="http://docbook.org/ns/docbook"
         xmlns:xl="http://www.w3.org/1999/xlink"
         xmlns:xi="http://www.w3.org/2001/XInclude"
         xmlns:xhtml="http://www.w3.org/1999/xhtml"
         xmlns:svg="http://www.w3.org/2000/svg"
         xmlns:ns="http://docbook.org/ns/docbook"
         xmlns:mathml="http://www.w3.org/1998/Math/MathML">
  <title>Controlling the flow with controllers</title>

  <para>In the previous chapters we already transcribed the Domain of our
  example extension <emphasis>SJROffers</emphasis> to a software based Domain
  Model. This lead to multiple files with class definitions, to be found in
  the subfolder <link
  linkend="???">EXT:sjr_offers/Classes/Domain/Model/</link>. Furthermore we
  set up the persistence layer. As a result we are alredy able to deposit the
  data of our Domain in the form of Domain Objects and to retrieve it
  again.</para>

  <para>In this chapter you'll see how to control the flow inside your
  extension. The bottom line is to evaluate requests of the website user, in
  order to trigger the appropriate action. Regarding our example extension
  <emphasis>SJROffers</emphasis>, it may make sense to show a list of all
  offers or to give out all relevant information to one offer. Further
  examples of such actions are:</para>

  <para><itemizedlist>
      <listitem>
        <para>Deleting a specific offer</para>
      </listitem>

      <listitem>
        <para>Deleting all offers of one organizatin linkion</para>
      </listitem>

      <listitem>
        <para>Displaying a form to change the data of an offer</para>
      </listitem>

      <listitem>
        <para>Updating an offer</para>
      </listitem>

      <listitem>
        <para>Listing the newest offers</para>
      </listitem>
    </itemizedlist>The code receiving the request and executing the
  appropriate action is combined in Controllers. A Controller is a component
  of the Model-View-Controller architecture, of which the basics are described
  in chapter 2, section "Model-View-Controller in Extbase". The operation of a
  Controller interconnected with the other components was described in chapter
  3.</para>

  <para>A Controller is an object of an extension, which is instantiated and
  called inside of extbase by the <classname>Dispatcher</classname> object.
  The controller takes care of the complete flow inside of the extension. It
  is the link between the Request, the Domain Model and the reaction in form
  of the Response. Inside the <emphasis>Controller</emphasis>, the data
  necessary for the flow is fetched from the respective Repositories, prepared
  according to the demand from outside and passed to the code responsible for
  the output (<emphasis>View</emphasis>). Besides this main task, a Controller
  is responsible for:</para>

  <para><itemizedlist>
      <listitem>
        <para>accepting the <classname>Request</classname> and
        <classname>Response</classname> object, respectively rejecting them,
        in case they can not be processed.</para>
      </listitem>

      <listitem>
        <para>inducing a check of the data coming in from the URL (especially
        from links) or forms of the Frontend. This data has to be checked for
        type and validity.</para>
      </listitem>

      <listitem>
        <para>checking which method (<emphasis>Action</emphasis>) of the
        Controller shall be called for further processing.</para>
      </listitem>

      <listitem>
        <para>preparing the incoming data, so it can be passed to the method
        in charge (<emphasis>Argument Mapping</emphasis>)</para>
      </listitem>

      <listitem>
        <para>initiating the rendering process.</para>
      </listitem>

      <listitem>
        <para>passing the output of the rendering process to the
        <classname>Response</classname> object.</para>
      </listitem>
    </itemizedlist>In the following section, we'll create the necessary
  Controller Classes of our extension and and therein implement the adequate
  <emphasis>Action</emphasis> methods. For this, we'll first have to decide,
  which Actions have to be implemented. For an extension usually needs
  multiple different Actions, we'll group them in different Controller
  Classes. A very "natural" way of grouping would be: Every Aggregate Root
  Class, containing objects on which an Action shall be applied, is
  administered by a proper Controller. In our case the two classes
  <classname>Organization</classname> and <classname>Offer</classname> are
  indicated. Now let's start with our first Controller. </para>

  <xi:include href="1-Creating%20Controllers%20and%20Actions.xml" />
  <xi:include href="2-Configuring%20and%20embedding%20Frontend%20Plugins.xml" />
  <xi:include href="3-Configuring%20the%20behavior%20of%20the%20extension.xml" />

</chapter>
