<?xml version="1.0" encoding="UTF-8"?>
<section version="5.0" xmlns="http://docbook.org/ns/docbook"
         xmlns:xl="http://www.w3.org/1999/xlink"
         xmlns:xi="http://www.w3.org/2001/XInclude"
         xmlns:xhtml="http://www.w3.org/1999/xhtml"
         xmlns:svg="http://www.w3.org/2000/svg"
         xmlns:ns="http://docbook.org/ns/docbook"
         xmlns:mathml="http://www.w3.org/1998/Math/MathML">
  <title>the application domain</title>

  <para>The main difference to the common approach to develop an extension is
  the concentration to the domain of the client - in our case to the domain of
  the offer management inside the Stadtjugendrings Stuttgart. First the
  essential core terms are to be extracted with which the employees of the
  Stadtjugendring are interact daily. Terms of the domain of the content
  management system (e.g. "list view" or "search") are not playing roles by
  this. After a first project meeting with the contact persons of the SJR
  following characteristics were defined:</para>

  <para><remark>TODO: check for a translation of
  Stadtjugendring</remark></para>

  <para><itemizedlist>
      <listitem>
        <para>Every member organization can edit their contact data via the
        front end.</para>
      </listitem>
    </itemizedlist></para>

  <para><itemizedlist>
      <listitem>
        <para>Every member organization can add, edit and delete their
        offers.</para>
      </listitem>

      <listitem>
        <para>The offers can searched by the users and filterd by several
        criteria.Filter criteria are specially:</para>

        <para>the duration of validity of the offer</para>

        <para>the target audience for which the offer is straightened (mostly
        the age span, but also physical handicapped, swimmer and so on)</para>

        <para>the target area for which the offer may be for interest (one or
        more city districts, nationwide), as well as</para>

        <para>a free selectable category to which the offer is counted among
        (e.g. "sport offer" or "spare time"</para>
      </listitem>

      <listitem>
        <para>The offers are output in list form and single view in the front
        end.</para>
      </listitem>

      <listitem>
        <para>A single organization can be shown with its offers in a
        view.</para>
      </listitem>

      <listitem>
        <para>The offers can be collected to a flyer which contains all
        information to the offers.</para>
      </listitem>
    </itemizedlist><remark>TODO: insert figure 5-1 here</remark></para>

  <para><emphasis>Figure 5-1: The still incoherent terms of the
  domain</emphasis></para>

  <para>These terms are the result of a process. Some of them are modified
  many times during the discussions. So the first choosen term of
  <emphasis>vendor</emphasis> developed to the term
  <emphasis>organization</emphasis>. Thereby a part was that the domain of the
  offer management not exist isolated inside the SJR. It is in fact embedded
  in the whole business. And there the term of member organization (or short
  <emphasis>organization</emphasis>) make more sense.</para>

  <para><remark>TODO: check if vendor is the right term</remark></para>

  <tip>
    <para>This development of a common language of developers (also ourselves)
    and domain experts (also the employees of the SJR) maybe is the most
    important part of the Domain Driven Design. In the literature you find the
    slightly bulky term <emphasis>Ubiquitos Language</emphasis>. Requirement
    for this process is that the developer take care for contact with the
    domain experts. This is notably in bigger projects in many cases not the
    case. More about the development of an Ubiquitos Language you can read
    about in chapter 2 in the section "Develop a common language".</para>
  </tip>

  <para>First of all the located rules and operations are fixed down on paper.
  Here is an excerpt of the list:</para>

  <para><itemizedlist>
      <listitem>
        <para>"An offer can be assigned to multiple townships if they are
        located in whose catchment area."</para>
      </listitem>

      <listitem>
        <para>"An organization can be assigned with multiple contact
        persons."</para>
      </listitem>

      <listitem>
        <para>"An offer can be assigned with a contact person. The contact
        persons of the organization are shown as selection."</para>
      </listitem>

      <listitem>
        <para>"Is there an offfer without a contact person, the main contact
        of the organization is mentioned."</para>
      </listitem>

      <listitem>
        <para>"An offer can show different attendance fees (e.g. for member
        and non member)."</para>
      </listitem>
    </itemizedlist>The terms and rules are taken in relationship now. From the
  past thoughts a first draft of the domain is made, wich you can see in
  figure 5-2. Every rectangle emblematize an objects of the domain.The lower
  half of the bin shows an extract of its properties. Properties in
  <emphasis>italic</emphasis> writing of a parent object are holding
  references to the child objects. The chaining lines with an arrow point to
  those parent child relations. An additional rhomb symbolized an
  <emphasis>aggregate</emphasis>, also a package of child objects.</para>

  <para><remark>TODO: Insert figure 5-2 here</remark></para>

  <para><emphasis>Figure 5-2: First draft of the domain.</emphasis></para>

  <tip>
    <para>This figure was created by a drawing program. In the communication
    with the customer we are aware of using drawing programs or UML tools,
    which would be constrict the workflow in this phase. Simple hand drafts
    are enough and are more accessible for the customer as technical
    diagrams.</para>
  </tip>

  <tip>
    <para>You should have noticed that we make a big point of using a common
    language between developer and domain experts at the begin of the section
    and now we use permanent english descriptions for classes, methods and
    properties. Our experience told us that in the life time of an extension
    also developer get in contact with the source code, which are not potent
    to understand other languages as their own language and english. To not
    exclude them without change effort we choose english as lingua franca of
    the source code. This is especially true for extensions that - like our
    case - are made public via the extension repository.</para>
  </tip>

  <para>Let us improve the first draft of the domain model. The offer has
  several property pairs, that belong together:</para>

  <para><itemizedlist>
      <listitem>
        <para><code>minimumAge</code> and <code>maximumAge</code> (the minimal
        and maximal age)</para>
      </listitem>

      <listitem>
        <para><code>minimumAttendants</code> and
        <code>maximumAttendants</code> (the minimal and maximal count of
        attendees)</para>
      </listitem>

      <listitem>
        <para><code>firstDate</code> and <code>lastDate</code> (date of
        beginning and end)</para>
      </listitem>
    </itemizedlist>These property pairs are subject to own rules, that are not
  part of a single property. The minimal age limit (<code>minimumAge</code>)
  for example should not be greater than the maximum age limit
  (<code>maximumAge</code>). The observation of this rule can be done by the
  offer itselfby a corresponding validation. But it rather belongs to the
  property pair. We store each property pair in an own domain object:
  <code>AgeRange</code>, <code>AttendanceRange</code> and
  <code>DateRange</code>. The outcome of this is the optimized second draft
  (see figure 5-3).</para>

  <para><remark>TODO: Insert figure 5-3 here</remark></para>

  <para><emphasis>Figure 5-3: Second draft of the domain.</emphasis></para>

  <para>The specific domain objects have a common property, they have a lower
  and upper value. With this we can insert a class hierarchy in which the
  three domain objects succeed these common property from a domain object
  <code>RangeConstraint</code>. This has two generic properties:
  <code>minimumValue</code> and <code>maximumValue</code> (see figure
  5-4).</para>

  <para><remark>TODO: Insert figure 5-4 here</remark></para>

  <para><emphasis>Figure 5-4: Third draft of the domain.</emphasis></para>

  <para>Our domain model has reached a certain level of maturity. Of course
  there is certain space for more optimization. The risk exists, that we lose
  in the details, whichwill be irrelevant in a later revision. We suggest that
  you first implement a basic model and than - with additional knowledge of
  the yet unknown details of the model - improve it step by step. Lets start
  with our first lines of code.</para>
</section>
