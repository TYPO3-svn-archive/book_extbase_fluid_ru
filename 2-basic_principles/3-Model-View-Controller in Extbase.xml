<?xml version="1.0" encoding="UTF-8"?>
<section version="5.0" xmlns="http://docbook.org/ns/docbook"
         xmlns:xl="http://www.w3.org/1999/xlink"
         xmlns:xi="http://www.w3.org/2001/XInclude"
         xmlns:xhtml="http://www.w3.org/1999/xhtml"
         xmlns:svg="http://www.w3.org/2000/svg"
         xmlns:ns="http://docbook.org/ns/docbook"
         xmlns:mathml="http://www.w3.org/1998/Math/MathML">
  <title>Модель-Отображение-Диспетчер в Extbase</title>

  <para>Объектно-ориентированное программирование и предметно-ориентированное
  проектирование определяют структуру будущего расширения на разных уровнях.
  Объектно-ориентированное программирование предоставляет нам основные
  стандартные кирпичика для разработки программного обеспечения: объекты в
  виде комбинация данных и связанных с ними методов. Предметно-ориентированное
  проектирование даёт инструменты для создания модели, отражающей законы
  реального мира в программном обеспечении. Но все ещё недостаёт компонента,
  определяющего реакцию на пользовательские запросы и общую конечную
  функциональность приложения. Именно это и даёт парадигма
  Модель-Отображение-Диспетчер. Это гарантирует чёткое разделение модели
  предметной области и ее внешнего представления. Такое чёткое разделение —
  основа гладкого взаимодействия Extbase и Fluid.</para>

  <para>Модель-Отображение-Диспетчер даёт шаблон инфраструктуры, на которой
  строится будущее приложение. Это грубый «план маршрута» и отделение логики
  представления от модели.</para>

  <para>Шаблон MVC разделяет приложение на три слоя:
  <emphasis>модель</emphasis>, реализующую предметную область, включая ее
  логику, <emphasis>диспетчер</emphasis>, контролирующий ход выполнения
  приложения, и <emphasis>отображение</emphasis>, подготавливающее и выводящее
  данные для пользователя (рисунок 2-4).</para>

  <para>Нижний слой, <emphasis>модель</emphasis> содержит логику приложения и
  данные, помимо этого, ещё и соответствующую логику доступа и хранения.
  Предметно-ориентированное проектирование разделяет этот слой далее. В
  расширении на основе Extbase классы для этого слоя можно найти в папке
  <emphasis>Classes/Domain</emphasis>.</para>

  <para><emphasis>Диспетчер</emphasis> представляет внешнюю (то есть
  вызываемую непосредственно пользователем) функциональность. Он координирует
  взаимодействие модели и представления в соответствие с актуальным запросом.
  Он извлекает данные из модели и передаёт их для отображения. Важно:
  диспетчер лишь <emphasis>координирует</emphasis> действия, фактическая
  работа обычно реализована в модели. Так как диспетчер сложно тестировать, он
  должен быть как можно проще.</para>

  <screenshot>
    <info>
      <title>Рисунок 2-4: шаблон MVC разделяет приложение на три больших
      слоя.</title>
    </info>

    <mediaobject>
      <imageobject>
        <imagedata fileref="2-4.svg"></imagedata>
      </imageobject>
    </mediaobject>
  </screenshot>

  <para> Верхний слой, <emphasis>Отображение (представление)</emphasis>
  включает всю логику представления и все, относящееся к представлению
  (выводу, отображению) данных.</para>

  <sidebar>
    <title>Собственный опыт</title>

    <para>Приблизительно 2 года назад я впервые столкнулся с парадигмой MVC.
    Копаясь в различных источниках, я пытался понять, как эту идею
    использовать в собственных расширениях. Я растерялся из-за огромного
    количества вариаций MVC. Ни один источник не смог помочь мне в
    структурировании обычного кода для расширения. Мне было ясно, что запросы
    к базе данных относятся к Модели, а шаблона является частью Представления.
    Но где должен храниться предметно-ориентированный код? И как избежать
    того, что в коде Объектов модели перемешаны части для SQL, предметной
    области и, опять же, методы присущие самому объекту? В конце концов,
    эксперименты с MVC привели к одним лишь расстройствам. И наконец,
    предметно ориентированное проектирование (DDD) указало мне путь к
    парадигме MVC, так как DDD подразумевает чёткое разделение проблем
    <emphasis>внутри</emphasis> модели, что «облегчает» Представление и
    Диспетчер.</para>

    <para>При дальнейшем разделении слоя Модели на Модель предметной области
    (сердце приложения), хранилища (слой базы данных) и средства проверки
    (содержащие инварианты модели), схема MVC становится простой для
    реализации и понимания.</para>

    <para><emphasis>Йохен Рау</emphasis></para>
  </sidebar>

  <section>
    <title>Взаимодействие Модели, Представления и Диспетчера</title>

    <para>Функционал многих приложений можно разделить на модули. Эти модули
    можно разделять и далее. Функции, например, сетевого журнала можно
    разделить следующим образом:</para>

    <para>Функционал для статей журнала:<itemizedlist>
        <listitem>
          <para>Полнотекстовое представление для всех статей.</para>
        </listitem>

        <listitem>
          <para>Создание статьи.</para>
        </listitem>

        <listitem>
          <para>Отображение статьи.</para>
        </listitem>

        <listitem>
          <para>Редактирование статьи.</para>
        </listitem>

        <listitem>
          <para>Удаление статьи.</para>
        </listitem>
      </itemizedlist> Функционал для комментариев: <itemizedlist>
        <listitem>
          <para>Создание комментариев.</para>
        </listitem>

        <listitem>
          <para>Удаление комментариев.</para>
        </listitem>
      </itemizedlist></para>

    <para>Эти модули реализованы в Диспетчере. Внутри Диспетчера имеется
    отдельное <emphasis>Действие</emphasis> для каждой отдельной функции. Для
    приведённого примера имеется диспетчер
    <emphasis>PostController</emphasis>, реализующий Действия для создания,
    отображения, редактирования и удаления статей. Кроме того, существует
    диспетчер <emphasis>CommentController</emphasis>, реализующий Действия для
    создания и удаления комментариев.</para>

    <para>Список комментариев в виде отдельного действия не реализуется, так
    как обычно комментарии отображаются вместе со статьёй, и нет режима,
    показывающего все комментарии.</para>

    <para>Оба примера показывают, что Диспетчер — это по большей части
    контейнер для соответствующих Действий.</para>

    <para>Теперь посмотрим на примере слаженную работы Модели, Представления и
    Диспетчера. Первый запрос, который мы рассмотрим, должен вывести на экран
    список сообщений в журнале (рисунок 2-5):</para>

    <para>Пользователь посылает запрос (1). Объект запроса содержит информацию
    о вызываемых диспетчере и действие, а также возможны дополнительные
    параметры. В этом примере Диспетчер — это <code>Post</code>, а действие —
    <code>list</code>. </para>

    <para>Ответом на запрос служит действие — запрос определённых данных из
    Модели (2). В ответ получаются один или несколько Объектов предметной
    области. В нашем примере действием выступает запрос всех сообщений
    журнала, получается массив со всеми объектами сообщений журнала
    (3).</para>

    <para>Затем действие вызывает соответствующий режим отображения и передаёт
    данные для представления (4) — в нашем случае массив сообщений
    журнала.</para>

    <para>Представление выводит данные и возвращает ответ пользователю
    (5).</para>

    <screenshot>
      <info>
        <title>Рисунок 2-5: в ответ на запрос выводится список сообщений
        журнала.</title>
      </info>

      <mediaobject>
        <imageobject>
          <imagedata fileref="2-5.svg"></imagedata>
        </imageobject>
      </mediaobject>
    </screenshot>

    <para>Теперь, как только ответ на первый запрос полностью переправлен
    пользователю, в браузере отобразится список всех статей в журнале.
    Пользователь может щёлкнуть по одному из сообщений для вывода его
    полностью. Кроме того, пользователь может добавить к статье комментарий.
    Рисунок 2-6 поможет нам разобраться, как сохраняется комментарий.</para>

    <para>Отправляя форму с комментарием, пользователь создаёт новый запрос
    (1), содержащий соответствующие диспетчер и действие. В нашем примере
    Диспетчер —это <code>Comment</code>, а действие — <code>new</code>. Помимо
    этого запрос содержит текст комментария и ссылку на комментируемую статью
    журнала.</para>

    <para>Теперь вызываемое действие должно изменить Модель и добавить новый
    комментарий к соответствующей статье журнала (2).</para>

    <para>После этого осуществляется переход к следующему действию (3). В
    нашем случае — переход к Действию <code>show</code> в
    <code>PostController</code>, отображающему сообщение журнала с только что
    добавленным комментарием.</para>

    <para>После чего Действие <code>show</code> вызывает соответствующий режим
    отображения и передаёт статью, которую нужно вывести (4).</para>

    <para>Представление отображает данные и возвращает результат пользователю
    (5).</para>

    <screenshot>
      <info>
        <title>Рисунок 2-6: запрос на сохранение комментария.</title>
      </info>

      <mediaobject>
        <imageobject>
          <imagedata fileref="2-6.svg"></imagedata>
        </imageobject>
      </mediaobject>
    </screenshot>

    <para>Зачастую можно наблюдать, что действия можно разделить на две
    категории: некоторые действия отвечают за управление отображением Модели,
    а другие — изменяют Модель и, обычно, переходят к действиям отображения. В
    приведённом примере сначала мы видели действие отображения, а затем —
    изменения.</para>

    <para>Теперь все необходимые для разработки приложения Модули готовы. Вы
    познакомились с основами объектно-ориентированного программирования,
    моделированием предметной области приложения в предметно-ориентированном
    проектировании и чётко разделили модель предметной области от логики
    представления.</para>

    <para>И наконец, хотелось бы познакомить Вас с моделью проектирования,
    способной значительно улучшить стабильность и качество исходного кода:
    разработкой через тестирование. Этот подход можно использовать независимо
    от представленных выше концепций, а как ещё один полезный модуль для
    разработки расширений на Extbase и Fluid.</para>

    <sidebar>
      <title>Отличия от классического шаблона MVC</title>

      <para>Если в прошлом Вы разрабатывали прикладные программы на шаблоне
      MVC, то заметили некоторые отличия от приводимого здесь варианта
      MVC.</para>

      <para>Строго говоря, имеются не только упомянутые компоненты отображения
      со стороны сервера, но и компоненты на стороне клиента: браузер
      обязательно участвует в отображении данных нашего сетевого приложения,
      поэтому он является частью слоя Представления. Более того, отображение
      может быть изменено на стороне клиента при помощи JavaScript. Как
      следствие, представление становится сложнее, чем в классическом варианте
      MVC.</para>

      <para>В шаблоне MVC для локального компьютера, Представление отслеживает
      изменения в Модели (обычно, используя шаблон разработки
      <emphasis>Наблюдатель (Observer)</emphasis>). Это позволяет оперативно
      отражать изменяющуюся Модель. Как уже говорилось, сервер и клиент не
      поддерживают постоянное соединение, поэтому изменения в Модели не могут
      сразу отображаться в браузере.</para>
    </sidebar>
  </section>
</section>
