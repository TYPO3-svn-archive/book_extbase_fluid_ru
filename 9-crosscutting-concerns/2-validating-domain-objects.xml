<?xml version="1.0" encoding="UTF-8"?>
<section version="5.0" xmlns="http://docbook.org/ns/docbook"
         xmlns:xl="http://www.w3.org/1999/xlink"
         xmlns:xi="http://www.w3.org/2001/XInclude"
         xmlns:xhtml="http://www.w3.org/1999/xhtml"
         xmlns:svg="http://www.w3.org/2000/svg"
         xmlns:ns="http://docbook.org/ns/docbook"
         xmlns:mathml="http://www.w3.org/1998/Math/MathML">
  <title>Validating domain objects</title>

  <para>We have learned about Extbase and Fluid in detail, but considered
  terms of consistence of the domain only marginally. Often we estimate that
  domain objects at all times retain consistent according to certain rules.
  This is not done automaticly, so it is rather important to define these
  rules explicitly. In the blog example for example we can make the folowing
  rules:</para>

  <para><itemizedlist>
      <listitem>
        <para>The field <code>username</code> and <code>password</code> of the
        user object must have at least 5 characters. Furthermore the username
        must not contain special characters.</para>
      </listitem>
    </itemizedlist></para>

  <para><itemizedlist>
      <listitem>
        <para>The field <code>email</code> of the user object must contain a
        valid email address.</para>
      </listitem>
    </itemizedlist></para>

  <para>These rules must apply at every point in time for the user object; on
  the other way a user object is only valid if it complies to these rules.
  These rules are called <emphasis>invariants</emphasis>, because they must be
  valid during the entire lifetime of the object.</para>

  <para>In a first step you have to consider which invariants your domain
  objects have to offer. The next point is to put these invariants to Extbase
  in an appropriate form. Extbase provides <emphasis>validators</emphasis> for
  checking the invariants - these are PHP classes in which the invariants are
  implemented in code.</para>

  <para>We will show you in the following how you can use a validator for the
  checking of invariants, and how you can give the user the possibility to
  correct an error when an error occurs.</para>

  <section>
    <title>Validators for checking of Invariants</title>

    <para>A validator is a PHP class that has to check a certain invariant. If
    the invariant is fulfilled than the validator returns <code>true</code>
    otherwise <code>false</code>. In Extbase all validators have to implement
    the interface
    <classname>Tx_Extbase_Validation_Validator_ValidatorInterface</classname>.
    In this interface some are methods defined. The most important is called
    <code>isValid($object)</code>. An object or value is passed over to it and
    it must return <code>true</code> when the object or value is valid,
    otherwise it returns <code>false</code>. There are some more methods in
    the <classname>ValidatorInterface</classname> to make it possible to pass
    settings and poll error messages. We recommend to inherit all validators
    from the
    <classname>Tx_Extbase_Validation_Validator_ValidatorInterface</classname>,
    because you get a default implemetation of the helper methods and you only
    have to implement the <methodname>IsValid()</methodname> method.</para>

    <tip>
      <para>You will find the complete reference of the
      <classname>ValidatorInterface</classname> in Appendix B.</para>
    </tip>

    <para>For example, a validator which checks whether the passed string is
    an email address looks like this:</para>

    <para><remark>TODO: insert code here</remark></para>

    <para>When <code>$value</code> is a string that compares to a (complex)
    regular expression, the validator returns <code>true</code>. Otherwise an
    error message is generated using <code>addError()</code> and then it
    returns <code>false</code>.</para>

    <tip>
      <para>The method <code>addError()</code> expects an error message and an
      error code. The latter should be unique, therefore we recommend to use
      the UNIX timestamp of the creation time of the source code. With the
      help of the error code the error can be definitely identified, for
      example in bug reports.</para>
    </tip>

    <para>In the package
    <classname>Tx_Extbase_Validation_Validator_*</classname> Extbase offers
    many validators for default requirements like the validation of emails,
    numbers or strings.</para>
  </section>

  <section>
    <title>When does validation take place?</title>

    <para>Domain objects in Extbase are validated only at one point in time:
    When they get inserted into a controller action. With the help of figure
    9-1 we can show at what happens before the action is called.</para>

    <para><remark>TODO: insert figure here</remark></para>

    <para><emphasis>Figure 9-1: Data flow of a request before the action is
    called</emphasis></para>

    <para>When a user sends a request, Extbase first determines which action
    respectively controller is responsible for this request. As Extbase knows
    the names and types of the arguments of the action it can create objects
    from the incoming data. This operation will be descibed in detail in the
    section "Argument mapping" later on. Now the main step for us is as
    follows: The created objects are to be validated, that is the invariants
    are to be checked. If all arguments are successfully validated, the
    requested action of the extension is called and it can continue processing
    the given objects for example give it to the view for displaying.</para>

    <tip>
      <para>Certainly it would be helpful if the validation is also be done
      during the persisting of the objects to the database. At the moment it
      is not done since the data is stored in the database after sending the
      answer back to the browser. Therefore the user could not be informed in
      case of validating errors. In the meantime a second validating when
      persisting the objects is built into FLOW3, so this will be expected in
      Extbase in the medium term.</para>
    </tip>

    <para>When an error occurs during validation, the method
    <methodname>errorAction()</methodname> of the current controller is
    called. The provided default <code>errorAction()</code> redirects the user
    to the last used form when possible, in order to give him a chance to
    correct the errors.</para>

    <tip>
      <para>You may ask how the <methodname>errorAction()</methodname> knows
      which form was the last displayed one. This information is created by
      the <code>form</code> ViewHelper. He adds automaticly the property
      <code>__referrer</code> to every generated form, which contains
      information about the current extension, controller and action
      combination. This data can be used by the
      <methodname>errorAction()</methodname> to display the erroneous form
      again.</para>
    </tip>
  </section>

  <section>
    <title>Registering validators</title>

    <para>Now we know how validators are working and when they are called.
    However we have to connect our domain model with the validators to define
    which part of the model is has to be checked by which valiator. Therefore
    there are three possibilities which we define in the following:</para>

    <para><itemizedlist>
        <listitem>
          <para>validating in the domain model with annotations</para>
        </listitem>

        <listitem>
          <para>validating in the domain model with an own validator
          class</para>
        </listitem>

        <listitem>
          <para>validating of controller arguments</para>
        </listitem>
      </itemizedlist></para>

    <section>
      <title>Validating in the domain model with annotations</title>

      <para>In most cases it is sufficient to validate the properties of a
      domain object separately. When all properties are validated with success
      the complete domain object is also successful validated; when a property
      can not be validated the validation of the complete domain object
      fails.</para>

      <para>To define how a property of our domain object should be validated
      we use so called <emphasis>annotations</emphasis> of our source code.
      Annotations are machine readable "annotations" in the source code that
      are placed in comment blocks and start with the character
      <code>@</code>.</para>

      <para>For the validaton the <code>@validate</code> annotation is
      available. With it we can specify which validator is to be used for
      checking the annotated property. Let us take a look at this using a part
      of the domain model <code>Post</code> of the blog example:</para>

      <para><programlisting>class Tx_BlogExample_Domain_Model_Post extends Tx_Extbase_DomainObject_AbstractEntity {
  /**
   * @var string
   * <emphasis role="bold">@validate StringLength(minimum=3, maximum=50)</emphasis>
   */
  protected $title;

  /**
   * @var string
   */
  protected $content;
  ...
}</programlisting></para>

      <para>With the line <code>@validate StringLength(minimum=3,
      maximum=50)</code> the validator for the property <code>$title</code> is
      specified. In paranthesis the parameter for the validator are specified.
      In our case we make shure that a title of a blog post is never shorter
      than three characters and will never be longer than 50
      characters.</para>

      <para>Which validator class is to be used? Extbase looks for a validator
      class using
      <code>Tx_Extbase_Validation_Validator_<emphasis>ValidatorName</emphasis>Validator</code>.
      Using the above given annotation <code>@validate StringLength</code> the
      validator
      <classname>Tx_Extbase_Validation_Validator_StringLengthValidator</classname>
      is used.</para>

      <para>When you have created your own validator to check the invariants
      you can use it in the <code>@validate</code> annotation using the full
      class name, like shown in the following example:</para>

      <para><programlisting>class Tx_BlogExample_Domain_Model_Post extends Tx_Extbase_DomainObject_AbstractEntity {
  /**
   * @var string
   * <emphasis role="bold">@validate Tx_BlogExample_Domain_Validator_TitleValidator</emphasis>
   */
  protected $title;

  /**
   * @var string
   */
  protected $content;
  ...
}</programlisting>Here we validate the property <code>$title</code> with the
      <classname>Tx_BlogExample_Domain_Validator_TitleValidator</classname>.
      This validator class now can check any invariants. For example, the
      validator shown in the following listing checks whether the title of a
      blog post is always build-on the scheme <emphasis>Maintopic:
      Title</emphasis>:</para>

      <para><remark>TODO: insert code here</remark></para>

      <para>Now you have seen how you can validate particular properties of
      the domain model. The next section shows to you, how complex domain
      objects are to be validated.</para>
    </section>

    <section>
      <title>Validating in the domain model with an own validator
      class</title>

      <para>The just introduced possibilities to register validators in the
      model is sepecially practical when individual properties of the model
      are to be validated. Sometimes it is necessary to validate the
      relationship between two or more properties of a model class. For
      example for a user registration it is reasonable that in the user object
      the property <code>$password</code> and <code>$passwordConfirmed</code>
      exists which should be identical. Therefore the individual validators
      for <code>$password</code> respectively
      <code>$passwordConfirmation</code> can not help, because they have no
      access to each other. You need a option to validate a domain object
      <emphasis>as a whole</emphasis>.</para>

      <para>For this you can implement an own validator class for every object
      in the domain model which validates the object as a whole and with it
      access to all object properties is possible.</para>

      <para>Important hereby is the correct naming convention. If you need a
      validator for the class
      <classname>Tx_ExtbaseExample_Domain_Model_User</classname> it must be
      implemented in the class
      <classname>Tx_ExtbaseExample_Domain_Validator_UserValidator</classname>.
      The name of the validator for a model object is incidental by replacing
      the namespace <code>Model</code> with <code>Validator</code> and also
      append <code>Validator</code>. When following the naming convention the
      validator is automatically called when it exists.</para>

      <para>Equipped with this knowledge we can implement the
      <code>UserValidator</code> which compares <code>$password</code> with
      <code>$passwordConfirmation</code>. At first we must check if the given
      object is of the type <code>user</code> - after all the validator can be
      called with any object and has to return <code>false</code> in such
      case:</para>

      <para><programlisting>class Tx_ExtbaseExample_Domain_Validator_UserValidator extends Tx_Extbase_Validation_Validator_AbstractValidator {
  public function isValid($user) {
    if (! $user instanceof Tx_ExtbaseExample_Domain_Model_User) {
      $this-&gt;addError('The given Object is not a User.', 1262341470);
      return FALSE;
    }
    return TRUE;
  }
}</programlisting></para>

      <para>So, if <code>$user</code> is not an instance of the user object an
      error message is directly created with <code>addError()</code>. The
      validator does not validate the object any further but returns
      <code>false</code>.</para>

      <tip>
        <para>The method <code>addError()</code> gets two parameters - the
        first is an error message string while the second is an error number.
        The Extbase developers always uses the current UNIX timestamp when
        calling <code>addError()</code>. By this it is secured that the
        validation errors can be unique identified.</para>
      </tip>

      <para>Now we have created the foundation of our validator and can start
      with the proper implementation - the check for equality of the
      passwords. This is made quickly:</para>

      <para><programlisting>class Tx_ExtbaseExample_Domain_Validator_UserValidator extends Tx_Extbase_Validation_Validator_AbstractValidator {
  public function isValid($user) {
    if (! $user instanceof Tx_ExtbaseExample_Domain_Model_User) {
      $this-&gt;addError('The given Object is not a User.', 1262341470);
      return FALSE;
    }
    if ($user-&gt;getPassword() !== $user-&gt;getPasswordConfirmation()) {
      $this-&gt;addError('The passwords do not match.', 1262341707);
      return FALSE;
    }
    return TRUE;
  }
}</programlisting>Because we have access to the complete object the checking
      for equality of <code>$password</code> and
      <code>$passwordConfirmation</code> is very simple now.</para>

      <para>Now we have got to know two possibilities how validators can be
      registered for our domain objects: directly in the model via
      <code>@validate</code> annotation for single properties and for complete
      domain objects with an own validator class.</para>

      <para>The illustrated validators until now are always executed when a
      domain model is given as parameter to a controller action - that is for
      all actions. Sometimes it is desired to initiate the validation only
      when calling special actions. How this can be done we will see in the
      next section.</para>
    </section>

    <section>
      <title>Validating of controller arguments</title>

      <para>If you want to validate a domain object only when calling a
      special action you have to define validators for individual arguments.
      Therefore a slightly modified form of the <code>@validate</code>
      annotation can be used which is set in the comment block of the
      controller action. It has the format <code>@validate
      <emphasis>[variablename] [validators]</emphasis></code>, in the example
      below it is <code>$pageName
      </code><classname>Tx_MyExtension_Domain_Validator_PagenameValidator</classname>:</para>

      <para><programlisting>/**
 * Creates a new page with a given name.
 *
 * @param string $pageName THe name of the page which should be created.
<emphasis role="bold"> * @validate $pageName Tx_MyExtension_Domain_Validator_PageNameValidator</emphasis>
 */
public function createPageAction($pageName) {
 ...
}</programlisting></para>

      <para>Here the parameter <code>$pageName</code> is checked with an own
      validator.</para>
    </section>

    <section>
      <title>Interaction of validators</title>

      <para>Now you know three possibilities how validators are to be
      registered. For an argument of an action the following validators are
      called:</para>

      <para><itemizedlist>
          <listitem>
            <para>The data types of the (primitive) arguments are checked.
            When a parameter is defined with <code>@param float</code> as a
            floating number then the validator checks this. When you want to
            disable the type validation for an argument, you have to declare
            the type as <code>mixed</code>.</para>
          </listitem>

          <listitem>
            <para>All <code>@validate</code> annotations of the domain model
            are evaluated.</para>
          </listitem>

          <listitem>
            <para>The validator class of the domain object is called when it
            exists.</para>
          </listitem>

          <listitem>
            <para>More validators that are defined in the action with
            <code>@validate</code> are called.</para>
          </listitem>
        </itemizedlist>Lets have a look at the interaction once more with an
      example:</para>

      <para><programlisting>/**
 * Creates a website user for the given page name.
 *
 * @param string $pageName The name of the page where the user should be created.
 * @param Tx_ExtbaseExample_Domain_Model_User $user The user which should be created.
<emphasis role="bold"> * @validate $user Tx_BlogExample_Domain_Validator_CustomUserValidator</emphasis>
 */
public function createUserAction($pageName, Tx_ExtbaseExample_Domain_Model_User $user) {
 ...
}</programlisting></para>

      <para>Here the following things are validated: <code>$pageName</code>
      must be a <emphasis>string</emphasis>. The data type of the
      <code>@param</code> annotation is validated. For <code>$user</code> all
      <code>@validate</code> annotations of the model are validated. Also the
      <code>Tx_BlogExample_Domain_Validator_UserValidator</code> is called if
      it exists. Beyond that the validator
      <code>Tx_BlogExample_Domain_Validator_CustomUserValidator</code> is used
      to validate <code>$user</code>.</para>

      <para>In some use cases it is reasonable that <emphasis>inconsistent
      domain objects</emphasis> are gives as arguments. That can be the case
      for multi page forms, because after filling the first page the domain
      object is not complete. In this case you can use the annotation
      <code>@dontvalidate <emphasis>$parameter</emphasis></code>. This
      prevents the processing of the <code>@validate</code> annotations in the
      domain model and calling the validator class of the domain
      object.</para>
    </section>
  </section>

  <section>
    <title>Case study: Edit an existing object</title>

    <para>Now you know all building blocks you need to edit a blog object with
    a form. Hereby the edit form should be displayed again in case of a
    validation error. Two actions are involved at editing the blog: The
    <code>editAction</code> shows the form with the blog to be edited and the
    <code>updateAction</code> saves the changes.</para>

    <tip>
      <para>If you want to implement edit forms for the domain objects of your
      extension you should implement it according to the schema displayed
      here.</para>
    </tip>

    <para>The <code>editAction</code> for the blog looks like this:</para>

    <para><programlisting>public function editAction(Tx_BlogExample_Domain_Model_Blog $blog) {
  $this-&gt;view-&gt;assign('blog', $blog);
}</programlisting></para>

    <para>The blog object that we want to edit is passed and given to the
    view. The Fluid template than looks like this (slightly shortened and
    reduced to the important):</para>

    <para><programlisting>&lt;f:form name="blog" object="{blog}" action="update"&gt;
  &lt;f:form.textbox property="title" /&gt;
  &lt;f:form.textbox property="description" /&gt;
  &lt;f:form.submit /&gt;
&lt;/f:form&gt;</programlisting></para>

    <para>Note that the <code>blog</code> object to be edited is bound to the
    form with <code>object="{blog}"</code>. With this you can reference a
    property of the linked object with help of the <code>property</code>
    attribute of the form elements.</para>

    <para>Also the name of the form (name="blog") is important because it is
    used as variable name for the object to be send. When submitting the form
    the <code>updateAction</code> is called with the <code>blog</code> object
    as parameter.</para>

    <para><programlisting>public function updateAction((Tx_BlogExample_Domain_Model_Blog $blog) {
  $this-&gt;blogRepository-&gt;update($blog);
}</programlisting></para>

    <constraintdef>
      <para>So the name of the argument is <code>$blog</code> because the form
      has the name blog. When no validating errors occur, the blog object will
      be persisted with its changes.</para>

      <para>Now have a look what happens when the user inserts erroneous data
      in the form. In this case an error occurs when validating the
      <code>$blog</code> arguments. Therefore instead of the
      <methodname>updateAction</methodname>, the
      <methodname>errorAction</methodname> is called. These action routes the
      request with <code>forward()</code> to the last used action because in
      case of an error the form should be displayed again. Additional an error
      message is generated and given to the controller. Ergo: In case of a
      validation error the <methodname>editAction</methodname> is displayed
      again.</para>

      <para>As we want to display the erroneous object again it is important
      that the <code>updateAction</code> and <code>editAction</code> use the
      same argument names. In our example the argument is called
      <code>$blog</code> in both cases, so we are on the safe side.</para>

      <para>Now we get an other problem: Also the <code>editAction</code>
      validates all parameter, but our blog object is not valid - we are
      captured in an endless loop. Therefore we have to suppress the argument
      validation for the <code>editAction</code>. For this we need the
      annotation <code>@dontvalidate </code>- the comment block of the
      <code>editAction</code> must be changed like this:</para>

      <para><programlisting>/**
 * @param Tx_BlogExample_Domain_Model_Blog $blog The blog object
 <emphasis role="bold">* @dontvalidate $blog</emphasis>
 */
public function editAction(Tx_BlogExample_Domain_Model_Blog $blog) {
  $this-&gt;view-&gt;assign('blog', $blog);
}</programlisting>Now the <code>blog</code> object is not validated in the
      <code>editAction</code>. So also a non valid <code>blog</code> object is
      displayed correct.</para>

      <tip>
        <para>If Extbase thows the exception
        Tx_Extbase_MVC_Exception_InfiniteLoop it signs that the
        <code>@dontvalidate</code> annotation is missing.</para>
      </tip>

      <para>Fluid automatically adds the CSS class <code>f3-form-error</code>
      to all erroneous fields - so you can frame them in red for example using
      CSS. There is also a <code>flashMessages</code> ViewHelper which outputs
      the error messages of the validation.</para>
    </constraintdef>
  </section>

  <section>
    <title>Case study: Create an object</title>

    <para>In the last section you have seen how to edit a blog object with a
    form. Now we will show you how to create a new blog object with a form.
    Also for creating a blog object two actions are involved. The
    <methodname>newAction</methodname> shows a form for creating an object and
    the <methodname>createAction</methodname> finally stores the
    object.</para>

    <para>The only difference to the editing of an object is that the
    <methodname>newAction</methodname> is not always given an argument: when
    first displaying the form it is logical that there is no object available
    to be displayed. Therefore the argument must be marked as optional.</para>

    <para>Here you will see all that we need. At first the controller
    code:</para>

    <para><programlisting>/**
 * This action shows the 'new' form for the blog.
 *
 * @param Tx_BlogExample_Domain_Model_Blog $newBlog The optional default values
 * @dontvalidate $newBlog
 */
public function newAction(Tx_BlogExample_Domain_Model_Blog $newBlog = NULL) {
  $this-&gt;view-&gt;assign('newBlog', $newBlog);
}

/**
 * This action creates the blog and stores it.
 *
 * @param Tx_BlogExample_Domain_Model_Blog $newBlog
 */
public function createAction(Tx_BlogExample_Domain_Model_Blog $newBlog) {
  $this-&gt;blogRepository-&gt;add($newBlog);
}</programlisting></para>

    <para>The Fluid template for the <methodname>newAction</methodname> looks
    like this (in short form):</para>

    <para><programlisting>&lt;f:flashMessages /&gt;
&lt;f:form name="newBlog" object="{newBlog}" action="create"&gt;
  &lt;f:form.textbox property="title" /&gt;
  &lt;f:form.textbox property="description" /&gt;
  &lt;f:form.submit /&gt;
&lt;/f:form&gt;</programlisting></para>

    <para>What is the summary of what we have we done? Again it is important
    that the <methodname>newAction</methodname> and the
    <methodname>createAction</methodname> have the same argument name. This
    has also to conform with the name of the Fluid template
    (<code>newBlog</code> in the example). Also the parameter for the
    <methodname>newAction</methodname> must be marked as optional and the
    validation of the parameter must be suppressed with
    <code>@dontvalidate</code>. Finally you can output validation errors in
    the template using the <code>flashMessages</code> ViewHelper when saving
    the data.</para>

    <para>In figure 9-2 you find an overview of the behavior of Extbase when
    displaying, editing respectively creating of domain objects in the
    frontend.</para>

    <para><remark>TODO: insert figure 9-2 here</remark></para>

    <para><emphasis>Figure 9-2: Data flow of the form display and saving. When
    a validating error occurs it is displayed again.</emphasis></para>
  </section>

  <section>
    <title>Mapping arguments</title>

    <para>In this section we would describe in detail what happens during a
    request before the accordingly action is called. Particular interesting is
    this process when sending a form. Because the HTTP protocol (and PHP) only
    can transfer arrays and strings, a big array with data is transferred when
    sending a form. In the action, domain objects are often expected as input
    parameter, so somehow the array must become an object. That is done by
    Extbase during the so called <emphasis>Argument Mappings</emphasis>. It
    makes it possible that as an user of Extbase you not only work with
    arrays, but you can change objects in forms or give over a complete object
    as <emphasis>parameter</emphasis> in links.</para>

    <para>Lets have a look at all of this in a concrete example: We pick up
    the blog example extension and edit a blog object, like you got to know in
    the last section ("Case study: Edit an existing object"). When you edit a
    blog you see a form in which you can change the properties of the blog, in
    our case <code>title</code> and <code>description</code>.</para>

    <para>The Fluid form looks like this (shortened to the essential):</para>

    <para><programlisting>&lt;f:form method="post" action="update" name="blog" object="{blog}"&gt;
  &lt;f:form.textbox property="title" /&gt;
  &lt;f:form.textbox property="description" /&gt;
&lt;/f:form&gt;</programlisting></para>

    <para>If the form is submitted the data will be sent in the following
    manner to the server:</para>

    <para><programlisting>tx_blogexample_pi1[blog][__identity] = 5
tx_blogexample_pi1[blog][title] = My title
tx_blogexample_pi1[blog][description] = Description</programlisting></para>

    <para>First of all the data is tagged with a prefix that contains the name
    of the extension and the plugin (<code>tx_blogexample_pi1</code>). This
    makes sure that two extensions have no impact on each other. Furthermore
    all changed properties of the blog object are transferred in an array, in
    our case <code>title</code> and <code>description</code>. As we want to
    change a blog object, we also need the identity of the blog object. In
    order to do this, Fluid automatically adds the <code>__identity</code>
    property for the <code>blog</code> object and fills it with the UID of the
    blog.</para>

    <para>Now on the server side a <code>blog</code> object must be created
    out of this information. This is the job of the property mapper. His
    operation method is shown in figure 9-3.</para>

    <para>For every argument it must be decided first whether a new object has
    to be created or if the work is based on an existing object. This will be
    decided based on the identity property <code>__identity</code>. If this is
    not in the input data a new object is created. Otherwise the framework
    knows the object identity and can go on work with it.</para>

    <tip>
      <para>When you take a look at what is transferred to the server by the
      new action of the blog example, you will find that no identity
      properties are transferred - in this case a new object is created as
      desired.</para>
    </tip>

    <para>In the blog example from above the __identity property is available,
    therefore the object with the corresponding UID is fetched from the
    repository and used for further modification.</para>

    <para>When no properties should be changed the object is given as argument
    to the action. So that is always persistent, that is changes to this
    object are saved automatically. <remark>!!!Sentence not
    clear</remark></para>

    <para><remark>TODO: insert figure 9-3</remark></para>

    <para><emphasis>Figure 9-3: The internal control flow of the property
    mapper.</emphasis></para>

    <para>In our case not only the <code>__identity</code> property is sent,
    but also a new <code>title</code> and <code>description</code> for our
    blog. For safety reasons a <emphasis>copy</emphasis> of the persistent
    object is applied. The properties of the copy are changed as given in the
    request, in our case <code>title</code> and <code>description</code> are
    set new. The generated copy is yet a transient object (see section "live
    cycle of objects" in chapter 2), that is changes on the object are
    <emphasis>not</emphasis> automatically persisted. The changed copy is
    given to the action as argument.</para>

    <para>Now we have to code in our controller explicit that we want to
    replace the existing persistent <code>blog</code> object with our changed
    <code>blog </code>object. For this the repository offers a method
    update():</para>

    <para><programlisting>$this-&gt;blogRepository-&gt;update($blog);</programlisting></para>

    <para>With this the changed object will be made into the persistent
    object: The changes are stored permanent now.</para>

    <sidebar>
      <para><emphasis role="bold">Copies of objects</emphasis></para>

      <para>Why a copy of an object is created when it is to be changed? Lets
      have assume that the persistent object would be directly changed. In
      this case an empty controller would be updating persistent
      objects:</para>

      <para><programlisting>public function updateAction(Tx_BlogExample_Domain_Model_Blog $blog) {
  // object will be automaticly persisted
}</programlisting></para>

      <para>At first this is very in transparent and difficult to understand.
      Besides of that, this procedure implies a big safety issue: When the
      original object is changed it would be impossible to cancel the
      persisting of the changes. For this reason a copy of the object is
      returned for changed objects, so the developer of the extension has to
      decide explicit whether or not the changes are to be made
      persistent.</para>
    </sidebar>

    <para>We want to assume a refinement of the argument mapping: When a link
    to an action is generated and the link contains an object as parameter the
    identity of the object is transferred automatically. In the following
    example the UID is transferred instead of the <code>blog</code>
    object:</para>

    <para><programlisting>&lt;f:link.action action='show' arguments='{blog: blog}'&gt;Show Blog&lt;/f:link.action&gt;</programlisting></para>

    <para>The generated URL contains the identity of the blog object:
    <code>tx_blogexample_pi1[blog]=47</code>. That is a short form of
    <code>tx_blogexample_pi1[blog][__Identity]=47</code>. Therefore the
    property mapper gets the blog object with the identity 47 from the
    repository and returns it directly without copying before.</para>

    <para>Now you know the argument mapping in detail an can use it in
    specific in your own projects.</para>

    <para>After you have learned how you can make sure any invariants of
    domain objects, the focus will be directed to the secure programming of
    the complete extension.</para>
  </section>
</section>
