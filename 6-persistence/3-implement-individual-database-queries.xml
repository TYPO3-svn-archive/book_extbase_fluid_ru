<?xml version="1.0" encoding="UTF-8"?>
<section version="5.0" xmlns="http://docbook.org/ns/docbook"
         xmlns:xl="http://www.w3.org/1999/xlink"
         xmlns:xi="http://www.w3.org/2001/XInclude"
         xmlns:xhtml="http://www.w3.org/1999/xhtml"
         xmlns:svg="http://www.w3.org/2000/svg"
         xmlns:ns="http://docbook.org/ns/docbook"
         xmlns:mathml="http://www.w3.org/1998/Math/MathML">
	<title>Individual Database Queries</title>

	<para>
		The previous descriptions about generic methods of queries to a Repository are sufficient for simple use-cases. However, there are many cases where they are not adequate and require more flexible solutions. On the requirements list of our application is the functionality to print a list of all the offers. In natural language this would sound as follows:
		<itemizedlist>
			<item>"Find all the offers for a certain region."</item>
			<item>"Find all the offers corresponding to a certain category."</item>
			<item>"Find all the offers containing a certain word."</item>
			<item>"Find offers that are associated to a selected set of organizations."</item>
		</itemizedlist>
	</para>

	<para>
		There are principally two ways of implementing such methods. On the one hand you could request all the offers from the Backend and filter them manually. On the other hand you could use a certain request matching exactly your criteria and just execute it. Contrary to the first case, the latter method would only build the objects that are really needed which positively affects the performance of your application. Therefore, the first method is more flexible and easier to implement.
	</para>

	<note>
		You may start developing your application using the first method and then, seeing your application growing, veering to the second method. Luckily, all the changes are encapsulated in the Repository and you therefore don't have to change any code out of the Persistence Backend.
	</note>

	<para>
		You can use Extbase's <emphasis>Query</emphasis>-object for implementing individual queries by giving it all the essential information needed for a qualified request to the database backend. Those information contain:
		<itemizedlist>
			<item>The request's class (<emphasis>Type</emphasis>) to which the request applies.</item>
			<item>An (optional) <emphasis>Constraint</emphasis> which restricts the result set.</item>
			<item>(Optional) Parameters which configure a section of the result set by a <emphasis>limit</emphasis> or an <emphasis>offset</emphasis>.</item>
			<item>(Optional) Parameters concerning the <emphasis>Orderings</emphasis> of the result set.</item>
		</itemizedlist>
	</para>

	<para>
		Within a Repository you can create a Query object by using the command <code>$this->createQuery()</code>. The Query object is already customized to the class which is managed by the Repository. Thus, the result set only consists of objects of that class, i.e. it consists of Offer objects within the <code>OfferRepository</code>. After giving all needed information to the Query object (detailed information will be given later on) you execute the request by using <code>execute()</code> which returns a sorted Array with the properly instantiated objects (or a via limit and offset customized section of it). For example, the generic method <code>findAll()</code> looks as follows:
		<code>
			public function findAll() {
				return $this->createQuery()->execute();
			}
		</code>

	In this simple first use-case we don't any constraining parameter to the Query object. However, we have to define such a parameter to implement the first specified request "Find all the offers for a certain region". Thus, the corresponding method looks as follows:
		<code>
			public function findInRegion(Tx_SjrOffers_Domain_Model_Region $region) {
				$query = $this->createQuery();
				$query->matching($query->contains('regions', $region));
				return $query->execute();
			}
		</code>
	</para>

	<para>
		Using the method <code>matching()</code> we give the Query the following condition: The property <emphasis>regions</emphasis> of the object <emphasis>Offer</emphasis> (which is managed by the Repository) should contain the region that is referenced by the variable <code>$region</code>. The method <code>contains()</code> returns a <emphasis>Constraint</emphasis> object. The Query object has some other methods each of which returns a <emphasis>Constraint</emphasis> object. Those methods may be roughly splitted into two groups: Comparing operations and Boolean operations. The first mentioned lead to a comparison between the value of a given property and another operand. The latter mentioned operations connect two conditions to one condition by the rules of Boolean Algebra and may negate a result respectively. Following Comparing operations are acceptable:
		<programlisting>
			equals($propertyName, $operand, $caseSensitive = TRUE)
			in($propertyName, $operand)
			contains($propertyName, $operand)
			like($propertyName, $operand)
			lessThan($propertyName, $operand)
			lessThanOrEqual($propertyName, $operand)
			greaterThan($propertyName, $operand)
			greaterThanOrEqual($propertyName, $operand)
		</programlisting>
	</para>

	<para>
		The method <code>equals()</code> executes a simple comparison between the property's value and the operand which may be a simple PHP data type or a Domain object. 
	</para>

	<para>
		Contrary, the methods <code>in()</code> and <code>contains()</code> accept multi-value data types as arguments (e.g. Array, ObjectStorage). As <code>in()</code> checks if a single-valued property exists in a multi-value operand, the latter method <code>contains()</code> checks if a multi-valued property contains a single-valued operand. The opposite of the introduced method <code>findInRegion()</code> is <code>findOfferedBy()</code> which accepts a multi-valued operand (<code>$organizations</code>). 
	</para>

	<programlisting>
		public function findOfferedBy(array $organizations) {
			$query = $this->createQuery();
			$query->matching($query->in('organization', $organizations));
			return $query->execute();
		}
	</programlisting>

	<note>
		The methods <code>in()</code> and <code>contains()</code> were introduced in Extbase version 1.1. If you pass an empty multi-valued property value or an empty multi-valued operand (e.g. an empty Array) to them you always get a <emphasis>false</emphasis> as return value for the test. Thus you have to prove if the operand <code>$organizations</code> of the method call <code>$query->in('organization', $organizations)</code> contains sane values or if it is just an empty Array. This is dependent on your domain logic. In the last example the method <code>findOfferedBy()</code> would return an empty set of values.
	</note>

	<para>
		It's possible to use comparison operators that are reaching deep into the tree of object hierarchy. Let's assume you want to filter the organizations whether they have offers for youngsters older than 16. You may define the request in the <code>OrganizationRepository</code> as follows:
	</para>

	<programlisting>
		$query->lessThanOrEqual('offers.ageRange.minimalValue', 16)
	</programlisting>

	<para>
		Extbase	solves the path <code>offers.ageRange.minimalValue</code> by seeking every organization which has offers whose age values have a minimum which is less or equal 16. Assuming that a Relational Database System is used in the Persistence Backend, this is internally solved by a so-called <emphasis>INNER JOIN</emphasis>. All relational types (1:1, 1:n, m:n) and all comparison operators are covered by this feature.
	</para>

	<note>
		The path notation was introduced in Extbase 1.1 and is derived from the <emphasis>Object-Accessor</emphasis> notation of Fluid (see Ch. 8). In Fluid you may access object properties with the notation <code>{organization.administrator.name}</code>. However, Fluid does not support the notation <code>{organization.offers.categories.title}</code> whereas <code>$query->equals('offers.categories.title', 'foo')</code> is possible die to the limitation in Fluid that the access of properties is not possible in a "concatenated way".
	</note>

	<para>
		Besides of the comparison operators the <code>Query</code> object supports Boolean Operators like:
		<programlisting>
			logicalAnd($constraint1, $constraint2)
			logicalOr($constraint1, $constraint2)
			logicalNot($constraint)
		</programlisting>

		The methods above return a <code>Constraint</code> object. The resulting <code>Constraint</code> object of <code>logicalAnd()</code> is true if both given params <code>$constraint1</code> and <code>$constraint2</code> are true whereas it's sufficient when using <code>logicalOr()</code> to be true if only one of the given params is true. Since Extbase 1.1 both methods accept an Array of constraints. Last but not least, the function <code>logicalNot()</code> inverts the given <code>$constraing</code> to it's opposite, i.e. <emphasis>true</emphasis> gets <emphasis>false</emphasis> and <emphasis>false</emphasis> gets <emphasis>true</emphasis>. Given this information, you can create complex queries like:

		<programlisting>
			public function findMatchingOrganizationAndRegion(Tx_SjrOffers_Domain_Model_Organization $organization, Tx_SjrOffers_Domain_Model_Region $region) {
				$query = $this->createQuery();
				$query->matching(
					$query->logicalAnd(
						$query->equals('organization', $organization), 
						$query->contains('regions', $region) 
						)
					); 
				return $query->execute();
			}
		</programlisting>
		The method <code>findMatchingOrganizationAndRegion()</code> returns those offers that match both the given organization and the given region. 
	</para>

	<para>
		For our example extension we need the 

	</para>
</section> 